{
    "name": "kafka",
    "description": "A Pulumi package for creating and managing Kafka.",
    "keywords": [
        "pulumi",
        "kafka"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`kafka` Terraform Provider](https://github.com/Mongey/terraform-provider-kafka).",
    "repository": "https://github.com/pulumi/pulumi-kafka",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "kafka": "Kafka"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Kafka.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Mongey/terraform-provider-kafka)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-kafka` repo](https://github.com/pulumi/pulumi-kafka/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-kafka` repo](https://github.com/Mongey/terraform-provider-kafka/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/Mongey/terraform-provider-kafka)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-kafka` repo](https://github.com/pulumi/pulumi-kafka/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-kafka` repo](https://github.com/Mongey/terraform-provider-kafka/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "bootstrapServers": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of kafka brokers\n"
            },
            "caCert": {
                "type": "string",
                "description": "CA certificate file to validate the server's certificate.\n"
            },
            "caCertFile": {
                "type": "string",
                "description": "Path to a CA certificate file to validate the server's certificate.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead."
            },
            "clientCert": {
                "type": "string",
                "description": "The client certificate.\n"
            },
            "clientCertFile": {
                "type": "string",
                "description": "Path to a file containing the client certificate.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead."
            },
            "clientKey": {
                "type": "string",
                "description": "The private key that the certificate was issued for.\n"
            },
            "clientKeyFile": {
                "type": "string",
                "description": "Path to a file containing the private key that the certificate was issued for.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `client_key` instead."
            },
            "clientKeyPassphrase": {
                "type": "string",
                "description": "The passphrase for the private key that the certificate was issued for.\n"
            },
            "saslMechanism": {
                "type": "string",
                "description": "SASL mechanism, can be plain, scram-sha512, scram-sha256\n",
                "default": "plain",
                "defaultInfo": {
                    "environment": [
                        "KAFKA_SASL_MECHANISM"
                    ]
                }
            },
            "saslPassword": {
                "type": "string",
                "description": "Password for SASL authentication.\n"
            },
            "saslUsername": {
                "type": "string",
                "description": "Username for SASL authentication.\n"
            },
            "skipTlsVerify": {
                "type": "boolean",
                "description": "Set this to true only if the target Kafka server is an insecure development instance.\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "KAFKA_SKIP_VERIFY"
                    ]
                }
            },
            "timeout": {
                "type": "integer",
                "description": "Timeout in seconds\n"
            },
            "tlsEnabled": {
                "type": "boolean",
                "description": "Enable communication with the Kafka Cluster over TLS.\n",
                "default": true,
                "defaultInfo": {
                    "environment": [
                        "KAFKA_ENABLE_TLS"
                    ]
                }
            }
        },
        "defaults": [
            "bootstrapServers"
        ]
    },
    "provider": {
        "description": "The provider type for the kafka package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "bootstrapServers": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of kafka brokers\n"
            },
            "caCert": {
                "type": "string",
                "description": "CA certificate file to validate the server's certificate.\n"
            },
            "caCertFile": {
                "type": "string",
                "description": "Path to a CA certificate file to validate the server's certificate.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead."
            },
            "clientCert": {
                "type": "string",
                "description": "The client certificate.\n"
            },
            "clientCertFile": {
                "type": "string",
                "description": "Path to a file containing the client certificate.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead."
            },
            "clientKey": {
                "type": "string",
                "description": "The private key that the certificate was issued for.\n"
            },
            "clientKeyFile": {
                "type": "string",
                "description": "Path to a file containing the private key that the certificate was issued for.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `client_key` instead."
            },
            "clientKeyPassphrase": {
                "type": "string",
                "description": "The passphrase for the private key that the certificate was issued for.\n"
            },
            "saslMechanism": {
                "type": "string",
                "description": "SASL mechanism, can be plain, scram-sha512, scram-sha256\n"
            },
            "saslPassword": {
                "type": "string",
                "description": "Password for SASL authentication.\n"
            },
            "saslUsername": {
                "type": "string",
                "description": "Username for SASL authentication.\n"
            },
            "skipTlsVerify": {
                "type": "boolean",
                "description": "Set this to true only if the target Kafka server is an insecure development instance.\n"
            },
            "timeout": {
                "type": "integer",
                "description": "Timeout in seconds\n"
            },
            "tlsEnabled": {
                "type": "boolean",
                "description": "Enable communication with the Kafka Cluster over TLS.\n"
            }
        },
        "required": [
            "bootstrapServers"
        ],
        "inputProperties": {
            "bootstrapServers": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "A list of kafka brokers\n"
            },
            "caCert": {
                "type": "string",
                "description": "CA certificate file to validate the server's certificate.\n"
            },
            "caCertFile": {
                "type": "string",
                "description": "Path to a CA certificate file to validate the server's certificate.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead."
            },
            "clientCert": {
                "type": "string",
                "description": "The client certificate.\n"
            },
            "clientCertFile": {
                "type": "string",
                "description": "Path to a file containing the client certificate.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead."
            },
            "clientKey": {
                "type": "string",
                "description": "The private key that the certificate was issued for.\n"
            },
            "clientKeyFile": {
                "type": "string",
                "description": "Path to a file containing the private key that the certificate was issued for.\n",
                "deprecationMessage": "This parameter is now deprecated and will be removed in a later release, please use `client_key` instead."
            },
            "clientKeyPassphrase": {
                "type": "string",
                "description": "The passphrase for the private key that the certificate was issued for.\n"
            },
            "saslMechanism": {
                "type": "string",
                "description": "SASL mechanism, can be plain, scram-sha512, scram-sha256\n",
                "default": "plain",
                "defaultInfo": {
                    "environment": [
                        "KAFKA_SASL_MECHANISM"
                    ]
                }
            },
            "saslPassword": {
                "type": "string",
                "description": "Password for SASL authentication.\n"
            },
            "saslUsername": {
                "type": "string",
                "description": "Username for SASL authentication.\n"
            },
            "skipTlsVerify": {
                "type": "boolean",
                "description": "Set this to true only if the target Kafka server is an insecure development instance.\n",
                "default": false,
                "defaultInfo": {
                    "environment": [
                        "KAFKA_SKIP_VERIFY"
                    ]
                }
            },
            "timeout": {
                "type": "integer",
                "description": "Timeout in seconds\n"
            },
            "tlsEnabled": {
                "type": "boolean",
                "description": "Enable communication with the Kafka Cluster over TLS.\n",
                "default": true,
                "defaultInfo": {
                    "environment": [
                        "KAFKA_ENABLE_TLS"
                    ]
                }
            }
        },
        "requiredInputs": [
            "bootstrapServers"
        ]
    },
    "resources": {
        "kafka:index/acl:Acl": {
            "description": "A resource for managing Kafka ACLs.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kafka from \"@pulumi/kafka\";\n\nconst test = new kafka.Acl(\"test\", {\n    aclResourceName: \"syslog\",\n    aclResourceType: \"Topic\",\n    aclPrincipal: \"User:Alice\",\n    aclHost: \"*\",\n    aclOperation: \"Write\",\n    aclPermissionType: \"Deny\",\n});\n```\n```python\nimport pulumi\nimport pulumi_kafka as kafka\n\ntest = kafka.Acl(\"test\",\n    acl_resource_name=\"syslog\",\n    acl_resource_type=\"Topic\",\n    acl_principal=\"User:Alice\",\n    acl_host=\"*\",\n    acl_operation=\"Write\",\n    acl_permission_type=\"Deny\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Kafka = Pulumi.Kafka;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Kafka.Acl(\"test\", new()\n    {\n        AclResourceName = \"syslog\",\n        AclResourceType = \"Topic\",\n        AclPrincipal = \"User:Alice\",\n        AclHost = \"*\",\n        AclOperation = \"Write\",\n        AclPermissionType = \"Deny\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := kafka.NewAcl(ctx, \"test\", \u0026kafka.AclArgs{\n\t\t\tAclResourceName:   pulumi.String(\"syslog\"),\n\t\t\tAclResourceType:   pulumi.String(\"Topic\"),\n\t\t\tAclPrincipal:      pulumi.String(\"User:Alice\"),\n\t\t\tAclHost:           pulumi.String(\"*\"),\n\t\t\tAclOperation:      pulumi.String(\"Write\"),\n\t\t\tAclPermissionType: pulumi.String(\"Deny\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.kafka.Acl;\nimport com.pulumi.kafka.AclArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new Acl(\"test\", AclArgs.builder()        \n            .aclResourceName(\"syslog\")\n            .aclResourceType(\"Topic\")\n            .aclPrincipal(\"User:Alice\")\n            .aclHost(\"*\")\n            .aclOperation(\"Write\")\n            .aclPermissionType(\"Deny\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: kafka:Acl\n    properties:\n      aclResourceName: syslog\n      aclResourceType: Topic\n      aclPrincipal: User:Alice\n      aclHost: '*'\n      aclOperation: Write\n      aclPermissionType: Deny\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nACLs can be imported using the following pattern\n\n```sh\n $ pulumi import kafka:index/acl:Acl test \"acl_principal|acl_host|acl_operation|acl_permission_type|resource_type|resource_name|resource_pattern_type_filter\"\n```\n\n e.g.\n\n```sh\n $ pulumi import kafka:index/acl:Acl test \"User:Alice|*|Write|Deny|Topic|syslog|Prefixed\"\n```\n\n ",
            "properties": {
                "aclHost": {
                    "type": "string",
                    "description": "Host from which principal listed in `acl_principal`\nwill have access.\n"
                },
                "aclOperation": {
                    "type": "string",
                    "description": "Operation that is being allowed or denied. Valid\nvalues are `Unknown`, `Any`, `All`, `Read`, `Write`, `Create`, `Delete`, `Alter`,\n`Describe`, `ClusterAction`, `DescribeConfigs`, `AlterConfigs`, `IdempotentWrite`.\n"
                },
                "aclPermissionType": {
                    "type": "string",
                    "description": "Type of permission. Valid values are `Unknown`,\n`Any`, `Allow`, `Deny`.\n"
                },
                "aclPrincipal": {
                    "type": "string",
                    "description": "Principal that is being allowed or denied.\n"
                },
                "aclResourceName": {
                    "type": "string",
                    "description": "The name of the resource.\n"
                },
                "aclResourceType": {
                    "type": "string",
                    "description": "The type of resource. Valid values are `Unknown`,\n`Any`, `Topic`, `Group`, `Cluster`, `TransactionalID`.\n"
                },
                "resourcePatternTypeFilter": {
                    "type": "string",
                    "description": "The pattern filter. Valid values\nare `Prefixed`, `Any`, `Match`, `Literal`. Default `Literal`.\n"
                }
            },
            "required": [
                "aclHost",
                "aclOperation",
                "aclPermissionType",
                "aclPrincipal",
                "aclResourceName",
                "aclResourceType"
            ],
            "inputProperties": {
                "aclHost": {
                    "type": "string",
                    "description": "Host from which principal listed in `acl_principal`\nwill have access.\n",
                    "willReplaceOnChanges": true
                },
                "aclOperation": {
                    "type": "string",
                    "description": "Operation that is being allowed or denied. Valid\nvalues are `Unknown`, `Any`, `All`, `Read`, `Write`, `Create`, `Delete`, `Alter`,\n`Describe`, `ClusterAction`, `DescribeConfigs`, `AlterConfigs`, `IdempotentWrite`.\n",
                    "willReplaceOnChanges": true
                },
                "aclPermissionType": {
                    "type": "string",
                    "description": "Type of permission. Valid values are `Unknown`,\n`Any`, `Allow`, `Deny`.\n",
                    "willReplaceOnChanges": true
                },
                "aclPrincipal": {
                    "type": "string",
                    "description": "Principal that is being allowed or denied.\n",
                    "willReplaceOnChanges": true
                },
                "aclResourceName": {
                    "type": "string",
                    "description": "The name of the resource.\n",
                    "willReplaceOnChanges": true
                },
                "aclResourceType": {
                    "type": "string",
                    "description": "The type of resource. Valid values are `Unknown`,\n`Any`, `Topic`, `Group`, `Cluster`, `TransactionalID`.\n",
                    "willReplaceOnChanges": true
                },
                "resourcePatternTypeFilter": {
                    "type": "string",
                    "description": "The pattern filter. Valid values\nare `Prefixed`, `Any`, `Match`, `Literal`. Default `Literal`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "aclHost",
                "aclOperation",
                "aclPermissionType",
                "aclPrincipal",
                "aclResourceName",
                "aclResourceType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Acl resources.\n",
                "properties": {
                    "aclHost": {
                        "type": "string",
                        "description": "Host from which principal listed in `acl_principal`\nwill have access.\n",
                        "willReplaceOnChanges": true
                    },
                    "aclOperation": {
                        "type": "string",
                        "description": "Operation that is being allowed or denied. Valid\nvalues are `Unknown`, `Any`, `All`, `Read`, `Write`, `Create`, `Delete`, `Alter`,\n`Describe`, `ClusterAction`, `DescribeConfigs`, `AlterConfigs`, `IdempotentWrite`.\n",
                        "willReplaceOnChanges": true
                    },
                    "aclPermissionType": {
                        "type": "string",
                        "description": "Type of permission. Valid values are `Unknown`,\n`Any`, `Allow`, `Deny`.\n",
                        "willReplaceOnChanges": true
                    },
                    "aclPrincipal": {
                        "type": "string",
                        "description": "Principal that is being allowed or denied.\n",
                        "willReplaceOnChanges": true
                    },
                    "aclResourceName": {
                        "type": "string",
                        "description": "The name of the resource.\n",
                        "willReplaceOnChanges": true
                    },
                    "aclResourceType": {
                        "type": "string",
                        "description": "The type of resource. Valid values are `Unknown`,\n`Any`, `Topic`, `Group`, `Cluster`, `TransactionalID`.\n",
                        "willReplaceOnChanges": true
                    },
                    "resourcePatternTypeFilter": {
                        "type": "string",
                        "description": "The pattern filter. Valid values\nare `Prefixed`, `Any`, `Match`, `Literal`. Default `Literal`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "kafka:index/quota:Quota": {
            "description": "A resource for managing Kafka quotas.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kafka from \"@pulumi/kafka\";\n\nconst quota = new kafka.Quota(\"quota\", {\n    config: {\n        consumer_byte_rate: \"5000000\",\n        producer_byte_rate: \"2500000\",\n    },\n    entityName: \"app_consumer\",\n    entityType: \"client-id\",\n});\n```\n```python\nimport pulumi\nimport pulumi_kafka as kafka\n\nquota = kafka.Quota(\"quota\",\n    config={\n        \"consumer_byte_rate\": \"5000000\",\n        \"producer_byte_rate\": \"2500000\",\n    },\n    entity_name=\"app_consumer\",\n    entity_type=\"client-id\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Kafka = Pulumi.Kafka;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var quota = new Kafka.Quota(\"quota\", new()\n    {\n        Config = \n        {\n            { \"consumer_byte_rate\", \"5000000\" },\n            { \"producer_byte_rate\", \"2500000\" },\n        },\n        EntityName = \"app_consumer\",\n        EntityType = \"client-id\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := kafka.NewQuota(ctx, \"quota\", \u0026kafka.QuotaArgs{\n\t\t\tConfig: pulumi.AnyMap{\n\t\t\t\t\"consumer_byte_rate\": pulumi.Any(\"5000000\"),\n\t\t\t\t\"producer_byte_rate\": pulumi.Any(\"2500000\"),\n\t\t\t},\n\t\t\tEntityName: pulumi.String(\"app_consumer\"),\n\t\t\tEntityType: pulumi.String(\"client-id\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.kafka.Quota;\nimport com.pulumi.kafka.QuotaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var quota = new Quota(\"quota\", QuotaArgs.builder()        \n            .config(Map.ofEntries(\n                Map.entry(\"consumer_byte_rate\", \"5000000\"),\n                Map.entry(\"producer_byte_rate\", \"2500000\")\n            ))\n            .entityName(\"app_consumer\")\n            .entityType(\"client-id\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  quota:\n    type: kafka:Quota\n    properties:\n      config:\n        consumer_byte_rate: '5000000'\n        producer_byte_rate: '2500000'\n      entityName: app_consumer\n      entityType: client-id\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of string k/v attributes.\n"
                },
                "entityName": {
                    "type": "string",
                    "description": "The name of the entity to target.\n"
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of entity. Valid values are `client-id`, `user`, `ip`.\n"
                }
            },
            "required": [
                "entityName",
                "entityType"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of string k/v attributes.\n",
                    "willReplaceOnChanges": true
                },
                "entityName": {
                    "type": "string",
                    "description": "The name of the entity to target.\n",
                    "willReplaceOnChanges": true
                },
                "entityType": {
                    "type": "string",
                    "description": "The type of entity. Valid values are `client-id`, `user`, `ip`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "entityName",
                "entityType"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Quota resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map of string k/v attributes.\n",
                        "willReplaceOnChanges": true
                    },
                    "entityName": {
                        "type": "string",
                        "description": "The name of the entity to target.\n",
                        "willReplaceOnChanges": true
                    },
                    "entityType": {
                        "type": "string",
                        "description": "The type of entity. Valid values are `client-id`, `user`, `ip`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "kafka:index/topic:Topic": {
            "description": "A resource for managing Kafka topics. Increases partition count without destroying the topic.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as kafka from \"@pulumi/kafka\";\n\nconst logs = new kafka.Topic(\"logs\", {\n    config: {\n        \"cleanup.policy\": \"compact\",\n        \"segment.ms\": \"20000\",\n    },\n    partitions: 100,\n    replicationFactor: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_kafka as kafka\n\nlogs = kafka.Topic(\"logs\",\n    config={\n        \"cleanup.policy\": \"compact\",\n        \"segment.ms\": \"20000\",\n    },\n    partitions=100,\n    replication_factor=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Kafka = Pulumi.Kafka;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var logs = new Kafka.Topic(\"logs\", new()\n    {\n        Config = \n        {\n            { \"cleanup.policy\", \"compact\" },\n            { \"segment.ms\", \"20000\" },\n        },\n        Partitions = 100,\n        ReplicationFactor = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := kafka.NewTopic(ctx, \"logs\", \u0026kafka.TopicArgs{\n\t\t\tConfig: pulumi.AnyMap{\n\t\t\t\t\"cleanup.policy\": pulumi.Any(\"compact\"),\n\t\t\t\t\"segment.ms\":     pulumi.Any(\"20000\"),\n\t\t\t},\n\t\t\tPartitions:        pulumi.Int(100),\n\t\t\tReplicationFactor: pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.kafka.Topic;\nimport com.pulumi.kafka.TopicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var logs = new Topic(\"logs\", TopicArgs.builder()        \n            .config(Map.ofEntries(\n                Map.entry(\"cleanup.policy\", \"compact\"),\n                Map.entry(\"segment.ms\", \"20000\")\n            ))\n            .partitions(100)\n            .replicationFactor(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  logs:\n    type: kafka:Topic\n    properties:\n      config:\n        cleanup.policy: compact\n        segment.ms: '20000'\n      partitions: 100\n      replicationFactor: 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nTopics can be imported using their ARN, e.g.\n\n```sh\n $ pulumi import kafka:index/topic:Topic logs systemd_logs\n```\n\n ",
            "properties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of string k/v attributes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n"
                },
                "partitions": {
                    "type": "integer",
                    "description": "The number of partitions the topic should have.\n"
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "The number of replicas the topic should have.\n"
                }
            },
            "required": [
                "name",
                "partitions",
                "replicationFactor"
            ],
            "inputProperties": {
                "config": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of string k/v attributes.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the topic.\n",
                    "willReplaceOnChanges": true
                },
                "partitions": {
                    "type": "integer",
                    "description": "The number of partitions the topic should have.\n"
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "The number of replicas the topic should have.\n"
                }
            },
            "requiredInputs": [
                "partitions",
                "replicationFactor"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Topic resources.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map of string k/v attributes.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the topic.\n",
                        "willReplaceOnChanges": true
                    },
                    "partitions": {
                        "type": "integer",
                        "description": "The number of partitions the topic should have.\n"
                    },
                    "replicationFactor": {
                        "type": "integer",
                        "description": "The number of replicas the topic should have.\n"
                    }
                },
                "type": "object"
            }
        },
        "kafka:index/userScramCredential:UserScramCredential": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "The password of the credential\n",
                    "secret": true
                },
                "scramIterations": {
                    "type": "integer",
                    "description": "The number of SCRAM iterations used when generating the credential\n"
                },
                "scramMechanism": {
                    "type": "string",
                    "description": "The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)\n"
                },
                "username": {
                    "type": "string",
                    "description": "The name of the credential\n"
                }
            },
            "required": [
                "password",
                "scramMechanism",
                "username"
            ],
            "inputProperties": {
                "password": {
                    "type": "string",
                    "description": "The password of the credential\n",
                    "secret": true
                },
                "scramIterations": {
                    "type": "integer",
                    "description": "The number of SCRAM iterations used when generating the credential\n"
                },
                "scramMechanism": {
                    "type": "string",
                    "description": "The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)\n",
                    "willReplaceOnChanges": true
                },
                "username": {
                    "type": "string",
                    "description": "The name of the credential\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "password",
                "scramMechanism",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserScramCredential resources.\n",
                "properties": {
                    "password": {
                        "type": "string",
                        "description": "The password of the credential\n",
                        "secret": true
                    },
                    "scramIterations": {
                        "type": "integer",
                        "description": "The number of SCRAM iterations used when generating the credential\n"
                    },
                    "scramMechanism": {
                        "type": "string",
                        "description": "The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)\n",
                        "willReplaceOnChanges": true
                    },
                    "username": {
                        "type": "string",
                        "description": "The name of the credential\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "kafka:index:getTopic": {
            "inputs": {
                "description": "A collection of arguments for invoking getTopic.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTopic.\n",
                "properties": {
                    "config": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "partitions": {
                        "type": "integer"
                    },
                    "replicationFactor": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "config",
                    "name",
                    "partitions",
                    "replicationFactor",
                    "id"
                ]
            }
        }
    }
}