// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Kafka
{
    /// <summary>
    /// The `kafka.Acl` resource manages Apache Kafka Access Control Lists (ACLs). ACLs control access to Kafka resources like topics, consumer groups, and clusters by defining which principals (users or services) can perform specific operations on these resources.
    /// 
    /// ## Example Usage
    /// 
    /// ### Allow Producer Access to Topic
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kafka = Pulumi.Kafka;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var producer = new Kafka.Acl("producer", new()
    ///     {
    ///         AclResourceName = "orders",
    ///         AclResourceType = "Topic",
    ///         AclPrincipal = "User:producer-service",
    ///         AclHost = "*",
    ///         AclOperation = "Write",
    ///         AclPermissionType = "Allow",
    ///     });
    /// 
    ///     // Also grant describe permission for producers
    ///     var producerDescribe = new Kafka.Acl("producer_describe", new()
    ///     {
    ///         AclResourceName = "orders",
    ///         AclResourceType = "Topic",
    ///         AclPrincipal = "User:producer-service",
    ///         AclHost = "*",
    ///         AclOperation = "Describe",
    ///         AclPermissionType = "Allow",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Allow Consumer Group Access
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kafka = Pulumi.Kafka;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Allow read access to topic
    ///     var consumerRead = new Kafka.Acl("consumer_read", new()
    ///     {
    ///         AclResourceName = "orders",
    ///         AclResourceType = "Topic",
    ///         AclPrincipal = "User:consumer-service",
    ///         AclHost = "*",
    ///         AclOperation = "Read",
    ///         AclPermissionType = "Allow",
    ///     });
    /// 
    ///     // Allow access to consumer group
    ///     var consumerGroup = new Kafka.Acl("consumer_group", new()
    ///     {
    ///         AclResourceName = "order-processors",
    ///         AclResourceType = "Group",
    ///         AclPrincipal = "User:consumer-service",
    ///         AclHost = "*",
    ///         AclOperation = "Read",
    ///         AclPermissionType = "Allow",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Prefix-Based Access Control
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kafka = Pulumi.Kafka;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Grant access to all topics with prefix "logs-"
    ///     var logsAccess = new Kafka.Acl("logs_access", new()
    ///     {
    ///         AclResourceName = "logs-",
    ///         AclResourceType = "Topic",
    ///         ResourcePatternTypeFilter = "Prefixed",
    ///         AclPrincipal = "User:log-aggregator",
    ///         AclHost = "*",
    ///         AclOperation = "Read",
    ///         AclPermissionType = "Allow",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Admin User with Full Access
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Kafka = Pulumi.Kafka;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Grant cluster-level admin access
    ///     var adminCluster = new Kafka.Acl("admin_cluster", new()
    ///     {
    ///         AclResourceName = "kafka-cluster",
    ///         AclResourceType = "Cluster",
    ///         AclPrincipal = "User:admin",
    ///         AclHost = "*",
    ///         AclOperation = "All",
    ///         AclPermissionType = "Allow",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Common ACL Patterns
    /// 
    /// ### Producer ACLs
    /// Producers typically need:
    /// - `Write` and `Describe` on topics
    /// - `Write` on `TransactionalID` (for transactional producers)
    /// - `IdempotentWrite` on `Cluster` (for idempotent producers)
    /// 
    /// ### Consumer ACLs
    /// Consumers typically need:
    /// - `Read` on topics
    /// - `Read` on consumer groups
    /// - `Describe` on topics (optional, for metadata)
    /// 
    /// ### Admin ACLs
    /// Administrators typically need:
    /// - `All` on `Cluster`
    /// - Or specific operations like `Alter`, `AlterConfigs`, `Create`, `Delete`
    /// 
    /// &gt; **Warning:** Be cautious with `Deny` ACLs as they take precedence over `Allow` ACLs. A deny rule will block access even if an allow rule exists.
    /// 
    /// ## Import
    /// 
    /// Kafka ACLs can be imported using a pipe-delimited string containing all ACL properties:
    /// 
    /// Format: ${acl_principal}|${acl_host}|${acl_operation}|${acl_permission_type}|${resource_type}|${resource_name}|${resource_pattern_type_filter}
    /// 
    /// ```sh
    /// $ pulumi import kafka:index/acl:Acl example 'User:producer|*|Write|Allow|Topic|orders|Literal'
    /// ```
    /// </summary>
    [KafkaResourceType("kafka:index/acl:Acl")]
    public partial class Acl : global::Pulumi.CustomResource
    {
        [Output("aclHost")]
        public Output<string> AclHost { get; private set; } = null!;

        [Output("aclOperation")]
        public Output<string> AclOperation { get; private set; } = null!;

        [Output("aclPermissionType")]
        public Output<string> AclPermissionType { get; private set; } = null!;

        [Output("aclPrincipal")]
        public Output<string> AclPrincipal { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("aclResourceName")]
        public Output<string> AclResourceName { get; private set; } = null!;

        [Output("aclResourceType")]
        public Output<string> AclResourceType { get; private set; } = null!;

        [Output("resourcePatternTypeFilter")]
        public Output<string?> ResourcePatternTypeFilter { get; private set; } = null!;


        /// <summary>
        /// Create a Acl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Acl(string name, AclArgs args, CustomResourceOptions? options = null)
            : base("kafka:index/acl:Acl", name, args ?? new AclArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Acl(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
            : base("kafka:index/acl:Acl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Acl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Acl Get(string name, Input<string> id, AclState? state = null, CustomResourceOptions? options = null)
        {
            return new Acl(name, id, state, options);
        }
    }

    public sealed class AclArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclHost", required: true)]
        public Input<string> AclHost { get; set; } = null!;

        [Input("aclOperation", required: true)]
        public Input<string> AclOperation { get; set; } = null!;

        [Input("aclPermissionType", required: true)]
        public Input<string> AclPermissionType { get; set; } = null!;

        [Input("aclPrincipal", required: true)]
        public Input<string> AclPrincipal { get; set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("aclResourceName", required: true)]
        public Input<string> AclResourceName { get; set; } = null!;

        [Input("aclResourceType", required: true)]
        public Input<string> AclResourceType { get; set; } = null!;

        [Input("resourcePatternTypeFilter")]
        public Input<string>? ResourcePatternTypeFilter { get; set; }

        public AclArgs()
        {
        }
        public static new AclArgs Empty => new AclArgs();
    }

    public sealed class AclState : global::Pulumi.ResourceArgs
    {
        [Input("aclHost")]
        public Input<string>? AclHost { get; set; }

        [Input("aclOperation")]
        public Input<string>? AclOperation { get; set; }

        [Input("aclPermissionType")]
        public Input<string>? AclPermissionType { get; set; }

        [Input("aclPrincipal")]
        public Input<string>? AclPrincipal { get; set; }

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Input("aclResourceName")]
        public Input<string>? AclResourceName { get; set; }

        [Input("aclResourceType")]
        public Input<string>? AclResourceType { get; set; }

        [Input("resourcePatternTypeFilter")]
        public Input<string>? ResourcePatternTypeFilter { get; set; }

        public AclState()
        {
        }
        public static new AclState Empty => new AclState();
    }
}
