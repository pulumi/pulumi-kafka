# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetTopicsListResult',
]

@pulumi.output_type
class GetTopicsListResult(dict):
    def __init__(__self__, *,
                 config: Mapping[str, _builtins.str],
                 partitions: _builtins.int,
                 replication_factor: _builtins.int,
                 topic_name: _builtins.str):
        """
        :param Mapping[str, _builtins.str] config: A map of string k/v attributes.
        :param _builtins.int partitions: Number of partitions.
        :param _builtins.int replication_factor: Number of replicas.
        :param _builtins.str topic_name: The name of the topic.
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "replication_factor", replication_factor)
        pulumi.set(__self__, "topic_name", topic_name)

    @_builtins.property
    @pulumi.getter
    def config(self) -> Mapping[str, _builtins.str]:
        """
        A map of string k/v attributes.
        """
        return pulumi.get(self, "config")

    @_builtins.property
    @pulumi.getter
    def partitions(self) -> _builtins.int:
        """
        Number of partitions.
        """
        return pulumi.get(self, "partitions")

    @_builtins.property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> _builtins.int:
        """
        Number of replicas.
        """
        return pulumi.get(self, "replication_factor")

    @_builtins.property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> _builtins.str:
        """
        The name of the topic.
        """
        return pulumi.get(self, "topic_name")


