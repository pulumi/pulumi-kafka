# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class Topic(pulumi.CustomResource):
    config: pulumi.Output[dict]
    """
    A map of string k/v attributes.
    """
    name: pulumi.Output[str]
    """
    The name of the topic.
    """
    partitions: pulumi.Output[float]
    """
    Number of partitions.
    """
    replication_factor: pulumi.Output[float]
    """
    Number of replicas.
    """
    def __init__(__self__, resource_name, opts=None, config=None, name=None, partitions=None, replication_factor=None, __props__=None, __name__=None, __opts__=None):
        """
        Create a Topic resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: A map of string k/v attributes.
        :param pulumi.Input[str] name: The name of the topic.
        :param pulumi.Input[float] partitions: Number of partitions.
        :param pulumi.Input[float] replication_factor: Number of replicas.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['config'] = config
            __props__['name'] = name
            if partitions is None:
                raise TypeError("Missing required property 'partitions'")
            __props__['partitions'] = partitions
            if replication_factor is None:
                raise TypeError("Missing required property 'replication_factor'")
            __props__['replication_factor'] = replication_factor
        super(Topic, __self__).__init__(
            'kafka:index/topic:Topic',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, config=None, name=None, partitions=None, replication_factor=None):
        """
        Get an existing Topic resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] config: A map of string k/v attributes.
        :param pulumi.Input[str] name: The name of the topic.
        :param pulumi.Input[float] partitions: Number of partitions.
        :param pulumi.Input[float] replication_factor: Number of replicas.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["config"] = config
        __props__["name"] = name
        __props__["partitions"] = partitions
        __props__["replication_factor"] = replication_factor
        return Topic(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

