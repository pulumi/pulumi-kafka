// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Acl struct {
	pulumi.CustomResourceState

	AclHost           pulumi.StringOutput `pulumi:"aclHost"`
	AclOperation      pulumi.StringOutput `pulumi:"aclOperation"`
	AclPermissionType pulumi.StringOutput `pulumi:"aclPermissionType"`
	AclPrincipal      pulumi.StringOutput `pulumi:"aclPrincipal"`
	// The name of the resource
	AclResourceName           pulumi.StringOutput    `pulumi:"aclResourceName"`
	AclResourceType           pulumi.StringOutput    `pulumi:"aclResourceType"`
	ResourcePatternTypeFilter pulumi.StringPtrOutput `pulumi:"resourcePatternTypeFilter"`
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOption) (*Acl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclHost == nil {
		return nil, errors.New("invalid value for required argument 'AclHost'")
	}
	if args.AclOperation == nil {
		return nil, errors.New("invalid value for required argument 'AclOperation'")
	}
	if args.AclPermissionType == nil {
		return nil, errors.New("invalid value for required argument 'AclPermissionType'")
	}
	if args.AclPrincipal == nil {
		return nil, errors.New("invalid value for required argument 'AclPrincipal'")
	}
	if args.AclResourceName == nil {
		return nil, errors.New("invalid value for required argument 'AclResourceName'")
	}
	if args.AclResourceType == nil {
		return nil, errors.New("invalid value for required argument 'AclResourceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Acl
	err := ctx.RegisterResource("kafka:index/acl:Acl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclState, opts ...pulumi.ResourceOption) (*Acl, error) {
	var resource Acl
	err := ctx.ReadResource("kafka:index/acl:Acl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Acl resources.
type aclState struct {
	AclHost           *string `pulumi:"aclHost"`
	AclOperation      *string `pulumi:"aclOperation"`
	AclPermissionType *string `pulumi:"aclPermissionType"`
	AclPrincipal      *string `pulumi:"aclPrincipal"`
	// The name of the resource
	AclResourceName           *string `pulumi:"aclResourceName"`
	AclResourceType           *string `pulumi:"aclResourceType"`
	ResourcePatternTypeFilter *string `pulumi:"resourcePatternTypeFilter"`
}

type AclState struct {
	AclHost           pulumi.StringPtrInput
	AclOperation      pulumi.StringPtrInput
	AclPermissionType pulumi.StringPtrInput
	AclPrincipal      pulumi.StringPtrInput
	// The name of the resource
	AclResourceName           pulumi.StringPtrInput
	AclResourceType           pulumi.StringPtrInput
	ResourcePatternTypeFilter pulumi.StringPtrInput
}

func (AclState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclState)(nil)).Elem()
}

type aclArgs struct {
	AclHost           string `pulumi:"aclHost"`
	AclOperation      string `pulumi:"aclOperation"`
	AclPermissionType string `pulumi:"aclPermissionType"`
	AclPrincipal      string `pulumi:"aclPrincipal"`
	// The name of the resource
	AclResourceName           string  `pulumi:"aclResourceName"`
	AclResourceType           string  `pulumi:"aclResourceType"`
	ResourcePatternTypeFilter *string `pulumi:"resourcePatternTypeFilter"`
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	AclHost           pulumi.StringInput
	AclOperation      pulumi.StringInput
	AclPermissionType pulumi.StringInput
	AclPrincipal      pulumi.StringInput
	// The name of the resource
	AclResourceName           pulumi.StringInput
	AclResourceType           pulumi.StringInput
	ResourcePatternTypeFilter pulumi.StringPtrInput
}

func (AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclArgs)(nil)).Elem()
}

type AclInput interface {
	pulumi.Input

	ToAclOutput() AclOutput
	ToAclOutputWithContext(ctx context.Context) AclOutput
}

func (*Acl) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (i *Acl) ToAclOutput() AclOutput {
	return i.ToAclOutputWithContext(context.Background())
}

func (i *Acl) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclOutput)
}

func (i *Acl) ToOutput(ctx context.Context) pulumix.Output[*Acl] {
	return pulumix.Output[*Acl]{
		OutputState: i.ToAclOutputWithContext(ctx).OutputState,
	}
}

// AclArrayInput is an input type that accepts AclArray and AclArrayOutput values.
// You can construct a concrete instance of `AclArrayInput` via:
//
//	AclArray{ AclArgs{...} }
type AclArrayInput interface {
	pulumi.Input

	ToAclArrayOutput() AclArrayOutput
	ToAclArrayOutputWithContext(context.Context) AclArrayOutput
}

type AclArray []AclInput

func (AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (i AclArray) ToAclArrayOutput() AclArrayOutput {
	return i.ToAclArrayOutputWithContext(context.Background())
}

func (i AclArray) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclArrayOutput)
}

func (i AclArray) ToOutput(ctx context.Context) pulumix.Output[[]*Acl] {
	return pulumix.Output[[]*Acl]{
		OutputState: i.ToAclArrayOutputWithContext(ctx).OutputState,
	}
}

// AclMapInput is an input type that accepts AclMap and AclMapOutput values.
// You can construct a concrete instance of `AclMapInput` via:
//
//	AclMap{ "key": AclArgs{...} }
type AclMapInput interface {
	pulumi.Input

	ToAclMapOutput() AclMapOutput
	ToAclMapOutputWithContext(context.Context) AclMapOutput
}

type AclMap map[string]AclInput

func (AclMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (i AclMap) ToAclMapOutput() AclMapOutput {
	return i.ToAclMapOutputWithContext(context.Background())
}

func (i AclMap) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclMapOutput)
}

func (i AclMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Acl] {
	return pulumix.Output[map[string]*Acl]{
		OutputState: i.ToAclMapOutputWithContext(ctx).OutputState,
	}
}

type AclOutput struct{ *pulumi.OutputState }

func (AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Acl)(nil)).Elem()
}

func (o AclOutput) ToAclOutput() AclOutput {
	return o
}

func (o AclOutput) ToAclOutputWithContext(ctx context.Context) AclOutput {
	return o
}

func (o AclOutput) ToOutput(ctx context.Context) pulumix.Output[*Acl] {
	return pulumix.Output[*Acl]{
		OutputState: o.OutputState,
	}
}

func (o AclOutput) AclHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.AclHost }).(pulumi.StringOutput)
}

func (o AclOutput) AclOperation() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.AclOperation }).(pulumi.StringOutput)
}

func (o AclOutput) AclPermissionType() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.AclPermissionType }).(pulumi.StringOutput)
}

func (o AclOutput) AclPrincipal() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.AclPrincipal }).(pulumi.StringOutput)
}

// The name of the resource
func (o AclOutput) AclResourceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.AclResourceName }).(pulumi.StringOutput)
}

func (o AclOutput) AclResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringOutput { return v.AclResourceType }).(pulumi.StringOutput)
}

func (o AclOutput) ResourcePatternTypeFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Acl) pulumi.StringPtrOutput { return v.ResourcePatternTypeFilter }).(pulumi.StringPtrOutput)
}

type AclArrayOutput struct{ *pulumi.OutputState }

func (AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Acl)(nil)).Elem()
}

func (o AclArrayOutput) ToAclArrayOutput() AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToAclArrayOutputWithContext(ctx context.Context) AclArrayOutput {
	return o
}

func (o AclArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Acl] {
	return pulumix.Output[[]*Acl]{
		OutputState: o.OutputState,
	}
}

func (o AclArrayOutput) Index(i pulumi.IntInput) AclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].([]*Acl)[vs[1].(int)]
	}).(AclOutput)
}

type AclMapOutput struct{ *pulumi.OutputState }

func (AclMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Acl)(nil)).Elem()
}

func (o AclMapOutput) ToAclMapOutput() AclMapOutput {
	return o
}

func (o AclMapOutput) ToAclMapOutputWithContext(ctx context.Context) AclMapOutput {
	return o
}

func (o AclMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Acl] {
	return pulumix.Output[map[string]*Acl]{
		OutputState: o.OutputState,
	}
}

func (o AclMapOutput) MapIndex(k pulumi.StringInput) AclOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Acl {
		return vs[0].(map[string]*Acl)[vs[1].(string)]
	}).(AclOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclInput)(nil)).Elem(), &Acl{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclArrayInput)(nil)).Elem(), AclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclMapInput)(nil)).Elem(), AclMap{})
	pulumi.RegisterOutputType(AclOutput{})
	pulumi.RegisterOutputType(AclArrayOutput{})
	pulumi.RegisterOutputType(AclMapOutput{})
}
