// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Acl struct {
	s *pulumi.ResourceState
}

// NewAcl registers a new resource with the given unique name, arguments, and options.
func NewAcl(ctx *pulumi.Context,
	name string, args *AclArgs, opts ...pulumi.ResourceOpt) (*Acl, error) {
	if args == nil || args.AclHost == nil {
		return nil, errors.New("missing required argument 'AclHost'")
	}
	if args == nil || args.AclOperation == nil {
		return nil, errors.New("missing required argument 'AclOperation'")
	}
	if args == nil || args.AclPermissionType == nil {
		return nil, errors.New("missing required argument 'AclPermissionType'")
	}
	if args == nil || args.AclPrincipal == nil {
		return nil, errors.New("missing required argument 'AclPrincipal'")
	}
	if args == nil || args.ResourceName == nil {
		return nil, errors.New("missing required argument 'ResourceName'")
	}
	if args == nil || args.ResourceType == nil {
		return nil, errors.New("missing required argument 'ResourceType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["aclHost"] = nil
		inputs["aclOperation"] = nil
		inputs["aclPermissionType"] = nil
		inputs["aclPrincipal"] = nil
		inputs["resourceName"] = nil
		inputs["resourcePatternTypeFilter"] = nil
		inputs["resourceType"] = nil
	} else {
		inputs["aclHost"] = args.AclHost
		inputs["aclOperation"] = args.AclOperation
		inputs["aclPermissionType"] = args.AclPermissionType
		inputs["aclPrincipal"] = args.AclPrincipal
		inputs["resourceName"] = args.ResourceName
		inputs["resourcePatternTypeFilter"] = args.ResourcePatternTypeFilter
		inputs["resourceType"] = args.ResourceType
	}
	s, err := ctx.RegisterResource("kafka:index/acl:Acl", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Acl{s: s}, nil
}

// GetAcl gets an existing Acl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcl(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AclState, opts ...pulumi.ResourceOpt) (*Acl, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["aclHost"] = state.AclHost
		inputs["aclOperation"] = state.AclOperation
		inputs["aclPermissionType"] = state.AclPermissionType
		inputs["aclPrincipal"] = state.AclPrincipal
		inputs["resourceName"] = state.ResourceName
		inputs["resourcePatternTypeFilter"] = state.ResourcePatternTypeFilter
		inputs["resourceType"] = state.ResourceType
	}
	s, err := ctx.ReadResource("kafka:index/acl:Acl", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Acl{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Acl) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Acl) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Acl) AclHost() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["aclHost"])
}

func (r *Acl) AclOperation() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["aclOperation"])
}

func (r *Acl) AclPermissionType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["aclPermissionType"])
}

func (r *Acl) AclPrincipal() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["aclPrincipal"])
}

// The name of the resouce
func (r *Acl) ResourceName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceName"])
}

func (r *Acl) ResourcePatternTypeFilter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourcePatternTypeFilter"])
}

func (r *Acl) ResourceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceType"])
}

// Input properties used for looking up and filtering Acl resources.
type AclState struct {
	AclHost interface{}
	AclOperation interface{}
	AclPermissionType interface{}
	AclPrincipal interface{}
	// The name of the resouce
	ResourceName interface{}
	ResourcePatternTypeFilter interface{}
	ResourceType interface{}
}

// The set of arguments for constructing a Acl resource.
type AclArgs struct {
	AclHost interface{}
	AclOperation interface{}
	AclPermissionType interface{}
	AclPrincipal interface{}
	// The name of the resouce
	ResourceName interface{}
	ResourcePatternTypeFilter interface{}
	ResourceType interface{}
}
