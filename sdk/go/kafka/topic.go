// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Topic` resource manages Apache Kafka topics, including their partition count, replication factor, and various configuration parameters. This resource supports non-destructive partition count increases.
//
// ## Example Usage
//
// ### Basic Topic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kafka.NewTopic(ctx, "example", &kafka.TopicArgs{
//				Name:              pulumi.String("example-topic"),
//				ReplicationFactor: pulumi.Int(3),
//				Partitions:        pulumi.Int(10),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Topic with Common Configurations
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kafka.NewTopic(ctx, "logs", &kafka.TopicArgs{
//				Name:              pulumi.String("application-logs"),
//				ReplicationFactor: pulumi.Int(3),
//				Partitions:        pulumi.Int(50),
//				Config: pulumi.StringMap{
//					"retention.ms":     pulumi.String("604800000"),
//					"segment.ms":       pulumi.String("86400000"),
//					"cleanup.policy":   pulumi.String("delete"),
//					"compression.type": pulumi.String("gzip"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Compacted Topic for Event Sourcing
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kafka.NewTopic(ctx, "events", &kafka.TopicArgs{
//				Name:              pulumi.String("user-events"),
//				ReplicationFactor: pulumi.Int(3),
//				Partitions:        pulumi.Int(100),
//				Config: pulumi.StringMap{
//					"cleanup.policy":        pulumi.String("compact"),
//					"retention.ms":          pulumi.String("-1"),
//					"min.compaction.lag.ms": pulumi.String("3600000"),
//					"delete.retention.ms":   pulumi.String("86400000"),
//					"compression.type":      pulumi.String("lz4"),
//					"segment.bytes":         pulumi.String("1073741824"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### High-Throughput Topic
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kafka.NewTopic(ctx, "metrics", &kafka.TopicArgs{
//				Name:              pulumi.String("system-metrics"),
//				ReplicationFactor: pulumi.Int(2),
//				Partitions:        pulumi.Int(200),
//				Config: pulumi.StringMap{
//					"retention.ms":                   pulumi.String("86400000"),
//					"segment.ms":                     pulumi.String("3600000"),
//					"compression.type":               pulumi.String("lz4"),
//					"max.message.bytes":              pulumi.String("1048576"),
//					"min.insync.replicas":            pulumi.String("2"),
//					"unclean.leader.election.enable": pulumi.String("false"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Configuration Parameters
//
// The `config` map supports all Kafka topic-level configurations. Common configurations include:
//
// ### Retention Settings
// - `retention.ms` - How long to retain messages (in milliseconds). Default: 604800000 (7 days)
// - `retention.bytes` - Maximum size of the log before deleting old segments. Default: -1 (no limit)
// - `segment.ms` - Time after which a log segment should be rotated. Default: 604800000 (7 days)
// - `segment.bytes` - Maximum size of a single log segment file. Default: 1073741824 (1GB)
//
// ### Cleanup and Compaction
// - `cleanup.policy` - Either "delete" or "compact" or both "compact,delete". Default: "delete"
// - `min.compaction.lag.ms` - Minimum time a message will remain uncompacted. Default: 0
// - `delete.retention.ms` - How long to retain delete tombstone markers for compacted topics. Default: 86400000 (1 day)
//
// ### Compression
// - `compression.type` - Compression codec: "uncompressed", "zstd", "lz4", "snappy", "gzip", "producer". Default: "producer"
//
// ### Replication and Durability
// - `min.insync.replicas` - Minimum number of replicas that must acknowledge a write. Default: 1
// - `unclean.leader.election.enable` - Whether to allow replicas not in ISR to be elected leader. Default: false
//
// ### Message Size
// - `max.message.bytes` - Maximum size of a message. Default: 1048588 (~1MB)
// - `message.timestamp.type` - Whether to use CreateTime or LogAppendTime. Default: "CreateTime"
//
// For a complete list of configurations, refer to the [Kafka documentation](https://kafka.apache.org/documentation/#topicconfigs).
//
// > **Note:** Increasing the partition count is supported without recreating the topic. However, decreasing partitions requires topic recreation.
//
// ## Import
//
// Existing Kafka topics can be imported using the topic name:
//
// ```sh
// $ pulumi import kafka:index/topic:Topic example example-topic
// ```
type Topic struct {
	pulumi.CustomResourceState

	// A map of string k/v attributes.
	Config pulumi.StringMapOutput `pulumi:"config"`
	// The name of the topic.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of partitions.
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// Number of replicas.
	ReplicationFactor pulumi.IntOutput `pulumi:"replicationFactor"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	if args.ReplicationFactor == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationFactor'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Topic
	err := ctx.RegisterResource("kafka:index/topic:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("kafka:index/topic:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
	// A map of string k/v attributes.
	Config map[string]string `pulumi:"config"`
	// The name of the topic.
	Name *string `pulumi:"name"`
	// Number of partitions.
	Partitions *int `pulumi:"partitions"`
	// Number of replicas.
	ReplicationFactor *int `pulumi:"replicationFactor"`
}

type TopicState struct {
	// A map of string k/v attributes.
	Config pulumi.StringMapInput
	// The name of the topic.
	Name pulumi.StringPtrInput
	// Number of partitions.
	Partitions pulumi.IntPtrInput
	// Number of replicas.
	ReplicationFactor pulumi.IntPtrInput
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	// A map of string k/v attributes.
	Config map[string]string `pulumi:"config"`
	// The name of the topic.
	Name *string `pulumi:"name"`
	// Number of partitions.
	Partitions int `pulumi:"partitions"`
	// Number of replicas.
	ReplicationFactor int `pulumi:"replicationFactor"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// A map of string k/v attributes.
	Config pulumi.StringMapInput
	// The name of the topic.
	Name pulumi.StringPtrInput
	// Number of partitions.
	Partitions pulumi.IntInput
	// Number of replicas.
	ReplicationFactor pulumi.IntInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (*Topic) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (i *Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i *Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

// TopicArrayInput is an input type that accepts TopicArray and TopicArrayOutput values.
// You can construct a concrete instance of `TopicArrayInput` via:
//
//	TopicArray{ TopicArgs{...} }
type TopicArrayInput interface {
	pulumi.Input

	ToTopicArrayOutput() TopicArrayOutput
	ToTopicArrayOutputWithContext(context.Context) TopicArrayOutput
}

type TopicArray []TopicInput

func (TopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (i TopicArray) ToTopicArrayOutput() TopicArrayOutput {
	return i.ToTopicArrayOutputWithContext(context.Background())
}

func (i TopicArray) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicArrayOutput)
}

// TopicMapInput is an input type that accepts TopicMap and TopicMapOutput values.
// You can construct a concrete instance of `TopicMapInput` via:
//
//	TopicMap{ "key": TopicArgs{...} }
type TopicMapInput interface {
	pulumi.Input

	ToTopicMapOutput() TopicMapOutput
	ToTopicMapOutputWithContext(context.Context) TopicMapOutput
}

type TopicMap map[string]TopicInput

func (TopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (i TopicMap) ToTopicMapOutput() TopicMapOutput {
	return i.ToTopicMapOutputWithContext(context.Background())
}

func (i TopicMap) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicMapOutput)
}

type TopicOutput struct{ *pulumi.OutputState }

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Topic)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

// A map of string k/v attributes.
func (o TopicOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// The name of the topic.
func (o TopicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Topic) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Number of partitions.
func (o TopicOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v *Topic) pulumi.IntOutput { return v.Partitions }).(pulumi.IntOutput)
}

// Number of replicas.
func (o TopicOutput) ReplicationFactor() pulumi.IntOutput {
	return o.ApplyT(func(v *Topic) pulumi.IntOutput { return v.ReplicationFactor }).(pulumi.IntOutput)
}

type TopicArrayOutput struct{ *pulumi.OutputState }

func (TopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Topic)(nil)).Elem()
}

func (o TopicArrayOutput) ToTopicArrayOutput() TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) ToTopicArrayOutputWithContext(ctx context.Context) TopicArrayOutput {
	return o
}

func (o TopicArrayOutput) Index(i pulumi.IntInput) TopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].([]*Topic)[vs[1].(int)]
	}).(TopicOutput)
}

type TopicMapOutput struct{ *pulumi.OutputState }

func (TopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Topic)(nil)).Elem()
}

func (o TopicMapOutput) ToTopicMapOutput() TopicMapOutput {
	return o
}

func (o TopicMapOutput) ToTopicMapOutputWithContext(ctx context.Context) TopicMapOutput {
	return o
}

func (o TopicMapOutput) MapIndex(k pulumi.StringInput) TopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Topic {
		return vs[0].(map[string]*Topic)[vs[1].(string)]
	}).(TopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TopicInput)(nil)).Elem(), &Topic{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicArrayInput)(nil)).Elem(), TopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicMapInput)(nil)).Elem(), TopicMap{})
	pulumi.RegisterOutputType(TopicOutput{})
	pulumi.RegisterOutputType(TopicArrayOutput{})
	pulumi.RegisterOutputType(TopicMapOutput{})
}
