// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Topic struct {
	s *pulumi.ResourceState
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOpt) (*Topic, error) {
	if args == nil || args.Partitions == nil {
		return nil, errors.New("missing required argument 'Partitions'")
	}
	if args == nil || args.ReplicationFactor == nil {
		return nil, errors.New("missing required argument 'ReplicationFactor'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["config"] = nil
		inputs["name"] = nil
		inputs["partitions"] = nil
		inputs["replicationFactor"] = nil
	} else {
		inputs["config"] = args.Config
		inputs["name"] = args.Name
		inputs["partitions"] = args.Partitions
		inputs["replicationFactor"] = args.ReplicationFactor
	}
	s, err := ctx.RegisterResource("kafka:index/topic:Topic", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.ID, state *TopicState, opts ...pulumi.ResourceOpt) (*Topic, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["config"] = state.Config
		inputs["name"] = state.Name
		inputs["partitions"] = state.Partitions
		inputs["replicationFactor"] = state.ReplicationFactor
	}
	s, err := ctx.ReadResource("kafka:index/topic:Topic", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Topic{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Topic) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Topic) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// A map of string k/v attributes.
func (r *Topic) Config() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["config"])
}

// The name of the topic.
func (r *Topic) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Number of partitions.
func (r *Topic) Partitions() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["partitions"])
}

// Number of replicas.
func (r *Topic) ReplicationFactor() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["replicationFactor"])
}

// Input properties used for looking up and filtering Topic resources.
type TopicState struct {
	// A map of string k/v attributes.
	Config interface{}
	// The name of the topic.
	Name interface{}
	// Number of partitions.
	Partitions interface{}
	// Number of replicas.
	ReplicationFactor interface{}
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// A map of string k/v attributes.
	Config interface{}
	// The name of the topic.
	Name interface{}
	// Number of partitions.
	Partitions interface{}
	// Number of replicas.
	ReplicationFactor interface{}
}
