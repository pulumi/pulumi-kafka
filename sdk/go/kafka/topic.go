// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type Topic struct {
	pulumi.CustomResourceState

	// A map of string k/v attributes.
	Config pulumi.MapOutput `pulumi:"config"`
	// The name of the topic.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of partitions.
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// Number of replicas.
	ReplicationFactor pulumi.IntOutput `pulumi:"replicationFactor"`
}

// NewTopic registers a new resource with the given unique name, arguments, and options.
func NewTopic(ctx *pulumi.Context,
	name string, args *TopicArgs, opts ...pulumi.ResourceOption) (*Topic, error) {
	if args == nil || args.Partitions == nil {
		return nil, errors.New("missing required argument 'Partitions'")
	}
	if args == nil || args.ReplicationFactor == nil {
		return nil, errors.New("missing required argument 'ReplicationFactor'")
	}
	if args == nil {
		args = &TopicArgs{}
	}
	var resource Topic
	err := ctx.RegisterResource("kafka:index/topic:Topic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopic gets an existing Topic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicState, opts ...pulumi.ResourceOption) (*Topic, error) {
	var resource Topic
	err := ctx.ReadResource("kafka:index/topic:Topic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Topic resources.
type topicState struct {
	// A map of string k/v attributes.
	Config map[string]interface{} `pulumi:"config"`
	// The name of the topic.
	Name *string `pulumi:"name"`
	// Number of partitions.
	Partitions *int `pulumi:"partitions"`
	// Number of replicas.
	ReplicationFactor *int `pulumi:"replicationFactor"`
}

type TopicState struct {
	// A map of string k/v attributes.
	Config pulumi.MapInput
	// The name of the topic.
	Name pulumi.StringPtrInput
	// Number of partitions.
	Partitions pulumi.IntPtrInput
	// Number of replicas.
	ReplicationFactor pulumi.IntPtrInput
}

func (TopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicState)(nil)).Elem()
}

type topicArgs struct {
	// A map of string k/v attributes.
	Config map[string]interface{} `pulumi:"config"`
	// The name of the topic.
	Name *string `pulumi:"name"`
	// Number of partitions.
	Partitions int `pulumi:"partitions"`
	// Number of replicas.
	ReplicationFactor int `pulumi:"replicationFactor"`
}

// The set of arguments for constructing a Topic resource.
type TopicArgs struct {
	// A map of string k/v attributes.
	Config pulumi.MapInput
	// The name of the topic.
	Name pulumi.StringPtrInput
	// Number of partitions.
	Partitions pulumi.IntInput
	// Number of replicas.
	ReplicationFactor pulumi.IntInput
}

func (TopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicArgs)(nil)).Elem()
}

type TopicInput interface {
	pulumi.Input

	ToTopicOutput() TopicOutput
	ToTopicOutputWithContext(ctx context.Context) TopicOutput
}

func (Topic) ElementType() reflect.Type {
	return reflect.TypeOf((*Topic)(nil)).Elem()
}

func (i Topic) ToTopicOutput() TopicOutput {
	return i.ToTopicOutputWithContext(context.Background())
}

func (i Topic) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicOutput)
}

type TopicOutput struct {
	*pulumi.OutputState
}

func (TopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicOutput)(nil)).Elem()
}

func (o TopicOutput) ToTopicOutput() TopicOutput {
	return o
}

func (o TopicOutput) ToTopicOutputWithContext(ctx context.Context) TopicOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(TopicOutput{})
}
