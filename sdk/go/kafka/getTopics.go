// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetTopics(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetTopicsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTopicsResult
	err := ctx.Invoke("kafka:index:getTopics", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getTopics.
type GetTopicsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A list containing all the topics.
	Lists []GetTopicsList `pulumi:"lists"`
}

func GetTopicsOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetTopicsResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetTopicsResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("kafka:index:getTopics", nil, GetTopicsResultOutput{}, options).(GetTopicsResultOutput), nil
	}).(GetTopicsResultOutput)
}

// A collection of values returned by getTopics.
type GetTopicsResultOutput struct{ *pulumi.OutputState }

func (GetTopicsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsResult)(nil)).Elem()
}

func (o GetTopicsResultOutput) ToGetTopicsResultOutput() GetTopicsResultOutput {
	return o
}

func (o GetTopicsResultOutput) ToGetTopicsResultOutputWithContext(ctx context.Context) GetTopicsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTopicsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsResult) string { return v.Id }).(pulumi.StringOutput)
}

// A list containing all the topics.
func (o GetTopicsResultOutput) Lists() GetTopicsListArrayOutput {
	return o.ApplyT(func(v GetTopicsResult) []GetTopicsList { return v.Lists }).(GetTopicsListArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTopicsResultOutput{})
}
