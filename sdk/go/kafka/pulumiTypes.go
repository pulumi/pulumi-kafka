// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type GetTopicsList struct {
	// A map of string k/v attributes.
	Config map[string]string `pulumi:"config"`
	// Number of partitions.
	Partitions int `pulumi:"partitions"`
	// Number of replicas.
	ReplicationFactor int `pulumi:"replicationFactor"`
	// The name of the topic.
	TopicName string `pulumi:"topicName"`
}

// GetTopicsListInput is an input type that accepts GetTopicsListArgs and GetTopicsListOutput values.
// You can construct a concrete instance of `GetTopicsListInput` via:
//
//	GetTopicsListArgs{...}
type GetTopicsListInput interface {
	pulumi.Input

	ToGetTopicsListOutput() GetTopicsListOutput
	ToGetTopicsListOutputWithContext(context.Context) GetTopicsListOutput
}

type GetTopicsListArgs struct {
	// A map of string k/v attributes.
	Config pulumi.StringMapInput `pulumi:"config"`
	// Number of partitions.
	Partitions pulumi.IntInput `pulumi:"partitions"`
	// Number of replicas.
	ReplicationFactor pulumi.IntInput `pulumi:"replicationFactor"`
	// The name of the topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetTopicsListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsList)(nil)).Elem()
}

func (i GetTopicsListArgs) ToGetTopicsListOutput() GetTopicsListOutput {
	return i.ToGetTopicsListOutputWithContext(context.Background())
}

func (i GetTopicsListArgs) ToGetTopicsListOutputWithContext(ctx context.Context) GetTopicsListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsListOutput)
}

// GetTopicsListArrayInput is an input type that accepts GetTopicsListArray and GetTopicsListArrayOutput values.
// You can construct a concrete instance of `GetTopicsListArrayInput` via:
//
//	GetTopicsListArray{ GetTopicsListArgs{...} }
type GetTopicsListArrayInput interface {
	pulumi.Input

	ToGetTopicsListArrayOutput() GetTopicsListArrayOutput
	ToGetTopicsListArrayOutputWithContext(context.Context) GetTopicsListArrayOutput
}

type GetTopicsListArray []GetTopicsListInput

func (GetTopicsListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsList)(nil)).Elem()
}

func (i GetTopicsListArray) ToGetTopicsListArrayOutput() GetTopicsListArrayOutput {
	return i.ToGetTopicsListArrayOutputWithContext(context.Background())
}

func (i GetTopicsListArray) ToGetTopicsListArrayOutputWithContext(ctx context.Context) GetTopicsListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsListArrayOutput)
}

type GetTopicsListOutput struct{ *pulumi.OutputState }

func (GetTopicsListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsList)(nil)).Elem()
}

func (o GetTopicsListOutput) ToGetTopicsListOutput() GetTopicsListOutput {
	return o
}

func (o GetTopicsListOutput) ToGetTopicsListOutputWithContext(ctx context.Context) GetTopicsListOutput {
	return o
}

// A map of string k/v attributes.
func (o GetTopicsListOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetTopicsList) map[string]string { return v.Config }).(pulumi.StringMapOutput)
}

// Number of partitions.
func (o GetTopicsListOutput) Partitions() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsList) int { return v.Partitions }).(pulumi.IntOutput)
}

// Number of replicas.
func (o GetTopicsListOutput) ReplicationFactor() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsList) int { return v.ReplicationFactor }).(pulumi.IntOutput)
}

// The name of the topic.
func (o GetTopicsListOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsList) string { return v.TopicName }).(pulumi.StringOutput)
}

type GetTopicsListArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsList)(nil)).Elem()
}

func (o GetTopicsListArrayOutput) ToGetTopicsListArrayOutput() GetTopicsListArrayOutput {
	return o
}

func (o GetTopicsListArrayOutput) ToGetTopicsListArrayOutputWithContext(ctx context.Context) GetTopicsListArrayOutput {
	return o
}

func (o GetTopicsListArrayOutput) Index(i pulumi.IntInput) GetTopicsListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsList {
		return vs[0].([]GetTopicsList)[vs[1].(int)]
	}).(GetTopicsListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsListInput)(nil)).Elem(), GetTopicsListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsListArrayInput)(nil)).Elem(), GetTopicsListArray{})
	pulumi.RegisterOutputType(GetTopicsListOutput{})
	pulumi.RegisterOutputType(GetTopicsListArrayOutput{})
}
