// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"github.com/pulumi/pulumi/sdk/go/pulumi/config"
)

// A list of kafka brokers
func GetBootstrapServers(ctx *pulumi.Context) string {
	return config.Get(ctx, "kafka:bootstrapServers")
}

// Path to a CA certificate file to validate the server's certificate.
func GetCaCertFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "kafka:caCertFile")
}

// Path to a file containing the client certificate.
func GetClientCertFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "kafka:clientCertFile")
}

// Path to a file containing the private key that the certificate was issued for.
func GetClientKeyFile(ctx *pulumi.Context) string {
	return config.Get(ctx, "kafka:clientKeyFile")
}

// SASL mechanism, can be plain, scram-sha512, scram-sha256
func GetSaslMechanism(ctx *pulumi.Context) string {
	return config.Get(ctx, "kafka:saslMechanism")
}

// Password for SASL authentication.
func GetSaslPassword(ctx *pulumi.Context) string {
	return config.Get(ctx, "kafka:saslPassword")
}

// Username for SASL authentication.
func GetSaslUsername(ctx *pulumi.Context) string {
	return config.Get(ctx, "kafka:saslUsername")
}

// Set this to true only if the target Kafka server is an insecure development instance.
func GetSkipTlsVerify(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "kafka:skipTlsVerify")
}

// Timeout in seconds
func GetTimeout(ctx *pulumi.Context) int {
	return config.GetInt(ctx, "kafka:timeout")
}

// Enable communication with the Kafka Cluster over TLS.
func GetTlsEnabled(ctx *pulumi.Context) bool {
	return config.GetBool(ctx, "kafka:tlsEnabled")
}
