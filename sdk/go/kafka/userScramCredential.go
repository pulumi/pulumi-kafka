// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-kafka/sdk/v3/go/kafka/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type UserScramCredential struct {
	pulumi.CustomResourceState

	// The password of the credential
	Password pulumi.StringOutput `pulumi:"password"`
	// The number of SCRAM iterations used when generating the credential
	ScramIterations pulumi.IntPtrOutput `pulumi:"scramIterations"`
	// The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
	ScramMechanism pulumi.StringOutput `pulumi:"scramMechanism"`
	// The name of the credential
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewUserScramCredential registers a new resource with the given unique name, arguments, and options.
func NewUserScramCredential(ctx *pulumi.Context,
	name string, args *UserScramCredentialArgs, opts ...pulumi.ResourceOption) (*UserScramCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.ScramMechanism == nil {
		return nil, errors.New("invalid value for required argument 'ScramMechanism'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserScramCredential
	err := ctx.RegisterResource("kafka:index/userScramCredential:UserScramCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserScramCredential gets an existing UserScramCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserScramCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserScramCredentialState, opts ...pulumi.ResourceOption) (*UserScramCredential, error) {
	var resource UserScramCredential
	err := ctx.ReadResource("kafka:index/userScramCredential:UserScramCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserScramCredential resources.
type userScramCredentialState struct {
	// The password of the credential
	Password *string `pulumi:"password"`
	// The number of SCRAM iterations used when generating the credential
	ScramIterations *int `pulumi:"scramIterations"`
	// The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
	ScramMechanism *string `pulumi:"scramMechanism"`
	// The name of the credential
	Username *string `pulumi:"username"`
}

type UserScramCredentialState struct {
	// The password of the credential
	Password pulumi.StringPtrInput
	// The number of SCRAM iterations used when generating the credential
	ScramIterations pulumi.IntPtrInput
	// The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
	ScramMechanism pulumi.StringPtrInput
	// The name of the credential
	Username pulumi.StringPtrInput
}

func (UserScramCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*userScramCredentialState)(nil)).Elem()
}

type userScramCredentialArgs struct {
	// The password of the credential
	Password string `pulumi:"password"`
	// The number of SCRAM iterations used when generating the credential
	ScramIterations *int `pulumi:"scramIterations"`
	// The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
	ScramMechanism string `pulumi:"scramMechanism"`
	// The name of the credential
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a UserScramCredential resource.
type UserScramCredentialArgs struct {
	// The password of the credential
	Password pulumi.StringInput
	// The number of SCRAM iterations used when generating the credential
	ScramIterations pulumi.IntPtrInput
	// The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
	ScramMechanism pulumi.StringInput
	// The name of the credential
	Username pulumi.StringInput
}

func (UserScramCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userScramCredentialArgs)(nil)).Elem()
}

type UserScramCredentialInput interface {
	pulumi.Input

	ToUserScramCredentialOutput() UserScramCredentialOutput
	ToUserScramCredentialOutputWithContext(ctx context.Context) UserScramCredentialOutput
}

func (*UserScramCredential) ElementType() reflect.Type {
	return reflect.TypeOf((**UserScramCredential)(nil)).Elem()
}

func (i *UserScramCredential) ToUserScramCredentialOutput() UserScramCredentialOutput {
	return i.ToUserScramCredentialOutputWithContext(context.Background())
}

func (i *UserScramCredential) ToUserScramCredentialOutputWithContext(ctx context.Context) UserScramCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserScramCredentialOutput)
}

// UserScramCredentialArrayInput is an input type that accepts UserScramCredentialArray and UserScramCredentialArrayOutput values.
// You can construct a concrete instance of `UserScramCredentialArrayInput` via:
//
//	UserScramCredentialArray{ UserScramCredentialArgs{...} }
type UserScramCredentialArrayInput interface {
	pulumi.Input

	ToUserScramCredentialArrayOutput() UserScramCredentialArrayOutput
	ToUserScramCredentialArrayOutputWithContext(context.Context) UserScramCredentialArrayOutput
}

type UserScramCredentialArray []UserScramCredentialInput

func (UserScramCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserScramCredential)(nil)).Elem()
}

func (i UserScramCredentialArray) ToUserScramCredentialArrayOutput() UserScramCredentialArrayOutput {
	return i.ToUserScramCredentialArrayOutputWithContext(context.Background())
}

func (i UserScramCredentialArray) ToUserScramCredentialArrayOutputWithContext(ctx context.Context) UserScramCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserScramCredentialArrayOutput)
}

// UserScramCredentialMapInput is an input type that accepts UserScramCredentialMap and UserScramCredentialMapOutput values.
// You can construct a concrete instance of `UserScramCredentialMapInput` via:
//
//	UserScramCredentialMap{ "key": UserScramCredentialArgs{...} }
type UserScramCredentialMapInput interface {
	pulumi.Input

	ToUserScramCredentialMapOutput() UserScramCredentialMapOutput
	ToUserScramCredentialMapOutputWithContext(context.Context) UserScramCredentialMapOutput
}

type UserScramCredentialMap map[string]UserScramCredentialInput

func (UserScramCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserScramCredential)(nil)).Elem()
}

func (i UserScramCredentialMap) ToUserScramCredentialMapOutput() UserScramCredentialMapOutput {
	return i.ToUserScramCredentialMapOutputWithContext(context.Background())
}

func (i UserScramCredentialMap) ToUserScramCredentialMapOutputWithContext(ctx context.Context) UserScramCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserScramCredentialMapOutput)
}

type UserScramCredentialOutput struct{ *pulumi.OutputState }

func (UserScramCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserScramCredential)(nil)).Elem()
}

func (o UserScramCredentialOutput) ToUserScramCredentialOutput() UserScramCredentialOutput {
	return o
}

func (o UserScramCredentialOutput) ToUserScramCredentialOutputWithContext(ctx context.Context) UserScramCredentialOutput {
	return o
}

// The password of the credential
func (o UserScramCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *UserScramCredential) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// The number of SCRAM iterations used when generating the credential
func (o UserScramCredentialOutput) ScramIterations() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *UserScramCredential) pulumi.IntPtrOutput { return v.ScramIterations }).(pulumi.IntPtrOutput)
}

// The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
func (o UserScramCredentialOutput) ScramMechanism() pulumi.StringOutput {
	return o.ApplyT(func(v *UserScramCredential) pulumi.StringOutput { return v.ScramMechanism }).(pulumi.StringOutput)
}

// The name of the credential
func (o UserScramCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *UserScramCredential) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type UserScramCredentialArrayOutput struct{ *pulumi.OutputState }

func (UserScramCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserScramCredential)(nil)).Elem()
}

func (o UserScramCredentialArrayOutput) ToUserScramCredentialArrayOutput() UserScramCredentialArrayOutput {
	return o
}

func (o UserScramCredentialArrayOutput) ToUserScramCredentialArrayOutputWithContext(ctx context.Context) UserScramCredentialArrayOutput {
	return o
}

func (o UserScramCredentialArrayOutput) Index(i pulumi.IntInput) UserScramCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserScramCredential {
		return vs[0].([]*UserScramCredential)[vs[1].(int)]
	}).(UserScramCredentialOutput)
}

type UserScramCredentialMapOutput struct{ *pulumi.OutputState }

func (UserScramCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserScramCredential)(nil)).Elem()
}

func (o UserScramCredentialMapOutput) ToUserScramCredentialMapOutput() UserScramCredentialMapOutput {
	return o
}

func (o UserScramCredentialMapOutput) ToUserScramCredentialMapOutputWithContext(ctx context.Context) UserScramCredentialMapOutput {
	return o
}

func (o UserScramCredentialMapOutput) MapIndex(k pulumi.StringInput) UserScramCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserScramCredential {
		return vs[0].(map[string]*UserScramCredential)[vs[1].(string)]
	}).(UserScramCredentialOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserScramCredentialInput)(nil)).Elem(), &UserScramCredential{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserScramCredentialArrayInput)(nil)).Elem(), UserScramCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserScramCredentialMapInput)(nil)).Elem(), UserScramCredentialMap{})
	pulumi.RegisterOutputType(UserScramCredentialOutput{})
	pulumi.RegisterOutputType(UserScramCredentialArrayOutput{})
	pulumi.RegisterOutputType(UserScramCredentialMapOutput{})
}
