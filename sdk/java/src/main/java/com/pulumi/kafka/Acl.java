// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kafka;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.kafka.AclArgs;
import com.pulumi.kafka.Utilities;
import com.pulumi.kafka.inputs.AclState;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The `kafka.Acl` resource manages Apache Kafka Access Control Lists (ACLs). ACLs control access to Kafka resources like topics, consumer groups, and clusters by defining which principals (users or services) can perform specific operations on these resources.
 * 
 * ## Example Usage
 * 
 * ### Allow Producer Access to Topic
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kafka.Acl;
 * import com.pulumi.kafka.AclArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var producer = new Acl("producer", AclArgs.builder()
 *             .aclResourceName("orders")
 *             .aclResourceType("Topic")
 *             .aclPrincipal("User:producer-service")
 *             .aclHost("*")
 *             .aclOperation("Write")
 *             .aclPermissionType("Allow")
 *             .build());
 * 
 *         // Also grant describe permission for producers
 *         var producerDescribe = new Acl("producerDescribe", AclArgs.builder()
 *             .aclResourceName("orders")
 *             .aclResourceType("Topic")
 *             .aclPrincipal("User:producer-service")
 *             .aclHost("*")
 *             .aclOperation("Describe")
 *             .aclPermissionType("Allow")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Allow Consumer Group Access
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kafka.Acl;
 * import com.pulumi.kafka.AclArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Allow read access to topic
 *         var consumerRead = new Acl("consumerRead", AclArgs.builder()
 *             .aclResourceName("orders")
 *             .aclResourceType("Topic")
 *             .aclPrincipal("User:consumer-service")
 *             .aclHost("*")
 *             .aclOperation("Read")
 *             .aclPermissionType("Allow")
 *             .build());
 * 
 *         // Allow access to consumer group
 *         var consumerGroup = new Acl("consumerGroup", AclArgs.builder()
 *             .aclResourceName("order-processors")
 *             .aclResourceType("Group")
 *             .aclPrincipal("User:consumer-service")
 *             .aclHost("*")
 *             .aclOperation("Read")
 *             .aclPermissionType("Allow")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Prefix-Based Access Control
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kafka.Acl;
 * import com.pulumi.kafka.AclArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Grant access to all topics with prefix "logs-"
 *         var logsAccess = new Acl("logsAccess", AclArgs.builder()
 *             .aclResourceName("logs-")
 *             .aclResourceType("Topic")
 *             .resourcePatternTypeFilter("Prefixed")
 *             .aclPrincipal("User:log-aggregator")
 *             .aclHost("*")
 *             .aclOperation("Read")
 *             .aclPermissionType("Allow")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ### Admin User with Full Access
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.kafka.Acl;
 * import com.pulumi.kafka.AclArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         // Grant cluster-level admin access
 *         var adminCluster = new Acl("adminCluster", AclArgs.builder()
 *             .aclResourceName("kafka-cluster")
 *             .aclResourceType("Cluster")
 *             .aclPrincipal("User:admin")
 *             .aclHost("*")
 *             .aclOperation("All")
 *             .aclPermissionType("Allow")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Common ACL Patterns
 * 
 * ### Producer ACLs
 * Producers typically need:
 * - `Write` and `Describe` on topics
 * - `Write` on `TransactionalID` (for transactional producers)
 * - `IdempotentWrite` on `Cluster` (for idempotent producers)
 * 
 * ### Consumer ACLs
 * Consumers typically need:
 * - `Read` on topics
 * - `Read` on consumer groups
 * - `Describe` on topics (optional, for metadata)
 * 
 * ### Admin ACLs
 * Administrators typically need:
 * - `All` on `Cluster`
 * - Or specific operations like `Alter`, `AlterConfigs`, `Create`, `Delete`
 * 
 * &gt; **Warning:** Be cautious with `Deny` ACLs as they take precedence over `Allow` ACLs. A deny rule will block access even if an allow rule exists.
 * 
 * ## Import
 * 
 * Kafka ACLs can be imported using a pipe-delimited string containing all ACL properties:
 * 
 * Format: ${acl_principal}|${acl_host}|${acl_operation}|${acl_permission_type}|${resource_type}|${resource_name}|${resource_pattern_type_filter}
 * 
 * ```sh
 * $ pulumi import kafka:index/acl:Acl example &#39;User:producer|*|Write|Allow|Topic|orders|Literal&#39;
 * ```
 * 
 */
@ResourceType(type="kafka:index/acl:Acl")
public class Acl extends com.pulumi.resources.CustomResource {
    @Export(name="aclHost", refs={String.class}, tree="[0]")
    private Output<String> aclHost;

    public Output<String> aclHost() {
        return this.aclHost;
    }
    @Export(name="aclOperation", refs={String.class}, tree="[0]")
    private Output<String> aclOperation;

    public Output<String> aclOperation() {
        return this.aclOperation;
    }
    @Export(name="aclPermissionType", refs={String.class}, tree="[0]")
    private Output<String> aclPermissionType;

    public Output<String> aclPermissionType() {
        return this.aclPermissionType;
    }
    @Export(name="aclPrincipal", refs={String.class}, tree="[0]")
    private Output<String> aclPrincipal;

    public Output<String> aclPrincipal() {
        return this.aclPrincipal;
    }
    /**
     * The name of the resource
     * 
     */
    @Export(name="aclResourceName", refs={String.class}, tree="[0]")
    private Output<String> aclResourceName;

    /**
     * @return The name of the resource
     * 
     */
    public Output<String> aclResourceName() {
        return this.aclResourceName;
    }
    @Export(name="aclResourceType", refs={String.class}, tree="[0]")
    private Output<String> aclResourceType;

    public Output<String> aclResourceType() {
        return this.aclResourceType;
    }
    @Export(name="resourcePatternTypeFilter", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> resourcePatternTypeFilter;

    public Output<Optional<String>> resourcePatternTypeFilter() {
        return Codegen.optional(this.resourcePatternTypeFilter);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Acl(java.lang.String name) {
        this(name, AclArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Acl(java.lang.String name, AclArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Acl(java.lang.String name, AclArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kafka:index/acl:Acl", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Acl(java.lang.String name, Output<java.lang.String> id, @Nullable AclState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("kafka:index/acl:Acl", name, state, makeResourceOptions(options, id), false);
    }

    private static AclArgs makeArgs(AclArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AclArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Acl get(java.lang.String name, Output<java.lang.String> id, @Nullable AclState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Acl(name, id, state, options);
    }
}
