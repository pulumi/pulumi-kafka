// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kafka;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class UserScramCredentialArgs extends com.pulumi.resources.ResourceArgs {

    public static final UserScramCredentialArgs Empty = new UserScramCredentialArgs();

    /**
     * The password of the credential (deprecated, use password_wo instead)
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password of the credential (deprecated, use password_wo instead)
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Version identifier for the write-only password to track changes
     * 
     */
    @Import(name="passwordWoVersion")
    private @Nullable Output<String> passwordWoVersion;

    /**
     * @return Version identifier for the write-only password to track changes
     * 
     */
    public Optional<Output<String>> passwordWoVersion() {
        return Optional.ofNullable(this.passwordWoVersion);
    }

    /**
     * The number of SCRAM iterations used when generating the credential
     * 
     */
    @Import(name="scramIterations")
    private @Nullable Output<Integer> scramIterations;

    /**
     * @return The number of SCRAM iterations used when generating the credential
     * 
     */
    public Optional<Output<Integer>> scramIterations() {
        return Optional.ofNullable(this.scramIterations);
    }

    /**
     * The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
     * 
     */
    @Import(name="scramMechanism", required=true)
    private Output<String> scramMechanism;

    /**
     * @return The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
     * 
     */
    public Output<String> scramMechanism() {
        return this.scramMechanism;
    }

    /**
     * The name of the credential
     * 
     */
    @Import(name="username", required=true)
    private Output<String> username;

    /**
     * @return The name of the credential
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    private UserScramCredentialArgs() {}

    private UserScramCredentialArgs(UserScramCredentialArgs $) {
        this.password = $.password;
        this.passwordWoVersion = $.passwordWoVersion;
        this.scramIterations = $.scramIterations;
        this.scramMechanism = $.scramMechanism;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(UserScramCredentialArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private UserScramCredentialArgs $;

        public Builder() {
            $ = new UserScramCredentialArgs();
        }

        public Builder(UserScramCredentialArgs defaults) {
            $ = new UserScramCredentialArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param password The password of the credential (deprecated, use password_wo instead)
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password of the credential (deprecated, use password_wo instead)
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param passwordWoVersion Version identifier for the write-only password to track changes
         * 
         * @return builder
         * 
         */
        public Builder passwordWoVersion(@Nullable Output<String> passwordWoVersion) {
            $.passwordWoVersion = passwordWoVersion;
            return this;
        }

        /**
         * @param passwordWoVersion Version identifier for the write-only password to track changes
         * 
         * @return builder
         * 
         */
        public Builder passwordWoVersion(String passwordWoVersion) {
            return passwordWoVersion(Output.of(passwordWoVersion));
        }

        /**
         * @param scramIterations The number of SCRAM iterations used when generating the credential
         * 
         * @return builder
         * 
         */
        public Builder scramIterations(@Nullable Output<Integer> scramIterations) {
            $.scramIterations = scramIterations;
            return this;
        }

        /**
         * @param scramIterations The number of SCRAM iterations used when generating the credential
         * 
         * @return builder
         * 
         */
        public Builder scramIterations(Integer scramIterations) {
            return scramIterations(Output.of(scramIterations));
        }

        /**
         * @param scramMechanism The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
         * 
         * @return builder
         * 
         */
        public Builder scramMechanism(Output<String> scramMechanism) {
            $.scramMechanism = scramMechanism;
            return this;
        }

        /**
         * @param scramMechanism The SCRAM mechanism used to generate the credential (SCRAM-SHA-256, SCRAM-SHA-512)
         * 
         * @return builder
         * 
         */
        public Builder scramMechanism(String scramMechanism) {
            return scramMechanism(Output.of(scramMechanism));
        }

        /**
         * @param username The name of the credential
         * 
         * @return builder
         * 
         */
        public Builder username(Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username The name of the credential
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public UserScramCredentialArgs build() {
            if ($.scramMechanism == null) {
                throw new MissingRequiredPropertyException("UserScramCredentialArgs", "scramMechanism");
            }
            if ($.username == null) {
                throw new MissingRequiredPropertyException("UserScramCredentialArgs", "username");
            }
            return $;
        }
    }

}
