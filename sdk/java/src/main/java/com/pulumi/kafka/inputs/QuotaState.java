// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kafka.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QuotaState extends com.pulumi.resources.ResourceArgs {

    public static final QuotaState Empty = new QuotaState();

    /**
     * A map of string k/v properties.
     * 
     */
    @Import(name="config")
    private @Nullable Output<Map<String,String>> config;

    /**
     * @return A map of string k/v properties.
     * 
     */
    public Optional<Output<Map<String,String>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * The name of the entity (if entity_name is not provided, it will create entity-default Kafka quota)
     * 
     */
    @Import(name="entityName")
    private @Nullable Output<String> entityName;

    /**
     * @return The name of the entity (if entity_name is not provided, it will create entity-default Kafka quota)
     * 
     */
    public Optional<Output<String>> entityName() {
        return Optional.ofNullable(this.entityName);
    }

    /**
     * The type of the entity (client-id, user, ip)
     * 
     */
    @Import(name="entityType")
    private @Nullable Output<String> entityType;

    /**
     * @return The type of the entity (client-id, user, ip)
     * 
     */
    public Optional<Output<String>> entityType() {
        return Optional.ofNullable(this.entityType);
    }

    private QuotaState() {}

    private QuotaState(QuotaState $) {
        this.config = $.config;
        this.entityName = $.entityName;
        this.entityType = $.entityType;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QuotaState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QuotaState $;

        public Builder() {
            $ = new QuotaState();
        }

        public Builder(QuotaState defaults) {
            $ = new QuotaState(Objects.requireNonNull(defaults));
        }

        /**
         * @param config A map of string k/v properties.
         * 
         * @return builder
         * 
         */
        public Builder config(@Nullable Output<Map<String,String>> config) {
            $.config = config;
            return this;
        }

        /**
         * @param config A map of string k/v properties.
         * 
         * @return builder
         * 
         */
        public Builder config(Map<String,String> config) {
            return config(Output.of(config));
        }

        /**
         * @param entityName The name of the entity (if entity_name is not provided, it will create entity-default Kafka quota)
         * 
         * @return builder
         * 
         */
        public Builder entityName(@Nullable Output<String> entityName) {
            $.entityName = entityName;
            return this;
        }

        /**
         * @param entityName The name of the entity (if entity_name is not provided, it will create entity-default Kafka quota)
         * 
         * @return builder
         * 
         */
        public Builder entityName(String entityName) {
            return entityName(Output.of(entityName));
        }

        /**
         * @param entityType The type of the entity (client-id, user, ip)
         * 
         * @return builder
         * 
         */
        public Builder entityType(@Nullable Output<String> entityType) {
            $.entityType = entityType;
            return this;
        }

        /**
         * @param entityType The type of the entity (client-id, user, ip)
         * 
         * @return builder
         * 
         */
        public Builder entityType(String entityType) {
            return entityType(Output.of(entityType));
        }

        public QuotaState build() {
            return $;
        }
    }

}
