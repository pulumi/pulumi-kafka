// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kafka;

import com.pulumi.core.TypeShape;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("kafka");
/**
 * A list of kafka brokers
 * 
 */
    public List<String> bootstrapServers() {
        return Codegen.objectProp("bootstrapServers", TypeShape.<List<String>>builder(List.class).addParameter(String.class).build()).config(config).require();
    }
/**
 * CA certificate file to validate the server&#39;s certificate.
 * 
 */
    public Optional<String> caCert() {
        return Codegen.stringProp("caCert").config(config).get();
    }
/**
 * Path to a CA certificate file to validate the server&#39;s certificate.
 * 
 */
    public Optional<String> caCertFile() {
        return Codegen.stringProp("caCertFile").config(config).get();
    }
/**
 * The client certificate.
 * 
 */
    public Optional<String> clientCert() {
        return Codegen.stringProp("clientCert").config(config).get();
    }
/**
 * Path to a file containing the client certificate.
 * 
 */
    public Optional<String> clientCertFile() {
        return Codegen.stringProp("clientCertFile").config(config).get();
    }
/**
 * The private key that the certificate was issued for.
 * 
 */
    public Optional<String> clientKey() {
        return Codegen.stringProp("clientKey").config(config).get();
    }
/**
 * Path to a file containing the private key that the certificate was issued for.
 * 
 */
    public Optional<String> clientKeyFile() {
        return Codegen.stringProp("clientKeyFile").config(config).get();
    }
/**
 * The passphrase for the private key that the certificate was issued for.
 * 
 */
    public Optional<String> clientKeyPassphrase() {
        return Codegen.stringProp("clientKeyPassphrase").config(config).get();
    }
/**
 * SASL mechanism, can be plain, scram-sha512, scram-sha256
 * 
 */
    public Optional<String> saslMechanism() {
        return Codegen.stringProp("saslMechanism").config(config).env("KAFKA_SASL_MECHANISM").def("plain").get();
    }
/**
 * Password for SASL authentication.
 * 
 */
    public Optional<String> saslPassword() {
        return Codegen.stringProp("saslPassword").config(config).get();
    }
/**
 * Username for SASL authentication.
 * 
 */
    public Optional<String> saslUsername() {
        return Codegen.stringProp("saslUsername").config(config).get();
    }
/**
 * Set this to true only if the target Kafka server is an insecure development instance.
 * 
 */
    public Optional<Boolean> skipTlsVerify() {
        return Codegen.booleanProp("skipTlsVerify").config(config).env("KAFKA_SKIP_VERIFY").def(false).get();
    }
/**
 * Timeout in seconds
 * 
 */
    public Optional<Integer> timeout() {
        return Codegen.integerProp("timeout").config(config).get();
    }
/**
 * Enable communication with the Kafka Cluster over TLS.
 * 
 */
    public Optional<Boolean> tlsEnabled() {
        return Codegen.booleanProp("tlsEnabled").config(config).env("KAFKA_ENABLE_TLS").def(true).get();
    }
}
