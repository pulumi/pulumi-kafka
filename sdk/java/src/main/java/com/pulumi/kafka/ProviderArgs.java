// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.kafka;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * A list of kafka brokers
     * 
     */
    @Import(name="bootstrapServers", required=true, json=true)
    private Output<List<String>> bootstrapServers;

    /**
     * @return A list of kafka brokers
     * 
     */
    public Output<List<String>> bootstrapServers() {
        return this.bootstrapServers;
    }

    /**
     * CA certificate file to validate the server&#39;s certificate.
     * 
     */
    @Import(name="caCert")
    private @Nullable Output<String> caCert;

    /**
     * @return CA certificate file to validate the server&#39;s certificate.
     * 
     */
    public Optional<Output<String>> caCert() {
        return Optional.ofNullable(this.caCert);
    }

    /**
     * Path to a CA certificate file to validate the server&#39;s certificate.
     * 
     * @deprecated
     * This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead.
     * 
     */
    @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead. */
    @Import(name="caCertFile")
    private @Nullable Output<String> caCertFile;

    /**
     * @return Path to a CA certificate file to validate the server&#39;s certificate.
     * 
     * @deprecated
     * This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead.
     * 
     */
    @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead. */
    public Optional<Output<String>> caCertFile() {
        return Optional.ofNullable(this.caCertFile);
    }

    /**
     * The client certificate.
     * 
     */
    @Import(name="clientCert")
    private @Nullable Output<String> clientCert;

    /**
     * @return The client certificate.
     * 
     */
    public Optional<Output<String>> clientCert() {
        return Optional.ofNullable(this.clientCert);
    }

    /**
     * Path to a file containing the client certificate.
     * 
     * @deprecated
     * This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead.
     * 
     */
    @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead. */
    @Import(name="clientCertFile")
    private @Nullable Output<String> clientCertFile;

    /**
     * @return Path to a file containing the client certificate.
     * 
     * @deprecated
     * This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead.
     * 
     */
    @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead. */
    public Optional<Output<String>> clientCertFile() {
        return Optional.ofNullable(this.clientCertFile);
    }

    /**
     * The private key that the certificate was issued for.
     * 
     */
    @Import(name="clientKey")
    private @Nullable Output<String> clientKey;

    /**
     * @return The private key that the certificate was issued for.
     * 
     */
    public Optional<Output<String>> clientKey() {
        return Optional.ofNullable(this.clientKey);
    }

    /**
     * Path to a file containing the private key that the certificate was issued for.
     * 
     * @deprecated
     * This parameter is now deprecated and will be removed in a later release, please use `client_key` instead.
     * 
     */
    @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `client_key` instead. */
    @Import(name="clientKeyFile")
    private @Nullable Output<String> clientKeyFile;

    /**
     * @return Path to a file containing the private key that the certificate was issued for.
     * 
     * @deprecated
     * This parameter is now deprecated and will be removed in a later release, please use `client_key` instead.
     * 
     */
    @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `client_key` instead. */
    public Optional<Output<String>> clientKeyFile() {
        return Optional.ofNullable(this.clientKeyFile);
    }

    /**
     * The passphrase for the private key that the certificate was issued for.
     * 
     */
    @Import(name="clientKeyPassphrase")
    private @Nullable Output<String> clientKeyPassphrase;

    /**
     * @return The passphrase for the private key that the certificate was issued for.
     * 
     */
    public Optional<Output<String>> clientKeyPassphrase() {
        return Optional.ofNullable(this.clientKeyPassphrase);
    }

    /**
     * The version of Kafka protocol to use in `$MAJOR.$MINOR.$PATCH` format. Some features may not be available on older
     * versions. Default is 2.7.0.
     * 
     */
    @Import(name="kafkaVersion")
    private @Nullable Output<String> kafkaVersion;

    /**
     * @return The version of Kafka protocol to use in `$MAJOR.$MINOR.$PATCH` format. Some features may not be available on older
     * versions. Default is 2.7.0.
     * 
     */
    public Optional<Output<String>> kafkaVersion() {
        return Optional.ofNullable(this.kafkaVersion);
    }

    /**
     * The AWS access key.
     * 
     */
    @Import(name="saslAwsAccessKey")
    private @Nullable Output<String> saslAwsAccessKey;

    /**
     * @return The AWS access key.
     * 
     */
    public Optional<Output<String>> saslAwsAccessKey() {
        return Optional.ofNullable(this.saslAwsAccessKey);
    }

    /**
     * Path to a file containing the AWS pod identity authorization token
     * 
     */
    @Import(name="saslAwsContainerAuthorizationTokenFile")
    private @Nullable Output<String> saslAwsContainerAuthorizationTokenFile;

    /**
     * @return Path to a file containing the AWS pod identity authorization token
     * 
     */
    public Optional<Output<String>> saslAwsContainerAuthorizationTokenFile() {
        return Optional.ofNullable(this.saslAwsContainerAuthorizationTokenFile);
    }

    /**
     * URI to retrieve AWS credentials from
     * 
     */
    @Import(name="saslAwsContainerCredentialsFullUri")
    private @Nullable Output<String> saslAwsContainerCredentialsFullUri;

    /**
     * @return URI to retrieve AWS credentials from
     * 
     */
    public Optional<Output<String>> saslAwsContainerCredentialsFullUri() {
        return Optional.ofNullable(this.saslAwsContainerCredentialsFullUri);
    }

    /**
     * Set this to true to turn AWS credentials debug.
     * 
     */
    @Import(name="saslAwsCredsDebug", json=true)
    private @Nullable Output<Boolean> saslAwsCredsDebug;

    /**
     * @return Set this to true to turn AWS credentials debug.
     * 
     */
    public Optional<Output<Boolean>> saslAwsCredsDebug() {
        return Optional.ofNullable(this.saslAwsCredsDebug);
    }

    /**
     * External ID of the AWS IAM role to assume
     * 
     */
    @Import(name="saslAwsExternalId")
    private @Nullable Output<String> saslAwsExternalId;

    /**
     * @return External ID of the AWS IAM role to assume
     * 
     */
    public Optional<Output<String>> saslAwsExternalId() {
        return Optional.ofNullable(this.saslAwsExternalId);
    }

    /**
     * AWS profile name to use
     * 
     */
    @Import(name="saslAwsProfile")
    private @Nullable Output<String> saslAwsProfile;

    /**
     * @return AWS profile name to use
     * 
     */
    public Optional<Output<String>> saslAwsProfile() {
        return Optional.ofNullable(this.saslAwsProfile);
    }

    /**
     * AWS region where MSK is deployed.
     * 
     */
    @Import(name="saslAwsRegion")
    private @Nullable Output<String> saslAwsRegion;

    /**
     * @return AWS region where MSK is deployed.
     * 
     */
    public Optional<Output<String>> saslAwsRegion() {
        return Optional.ofNullable(this.saslAwsRegion);
    }

    /**
     * Arn of an AWS IAM role to assume
     * 
     */
    @Import(name="saslAwsRoleArn")
    private @Nullable Output<String> saslAwsRoleArn;

    /**
     * @return Arn of an AWS IAM role to assume
     * 
     */
    public Optional<Output<String>> saslAwsRoleArn() {
        return Optional.ofNullable(this.saslAwsRoleArn);
    }

    /**
     * The AWS secret key.
     * 
     */
    @Import(name="saslAwsSecretKey")
    private @Nullable Output<String> saslAwsSecretKey;

    /**
     * @return The AWS secret key.
     * 
     */
    public Optional<Output<String>> saslAwsSecretKey() {
        return Optional.ofNullable(this.saslAwsSecretKey);
    }

    /**
     * List of paths to AWS shared config files.
     * 
     */
    @Import(name="saslAwsSharedConfigFiles", json=true)
    private @Nullable Output<List<String>> saslAwsSharedConfigFiles;

    /**
     * @return List of paths to AWS shared config files.
     * 
     */
    public Optional<Output<List<String>>> saslAwsSharedConfigFiles() {
        return Optional.ofNullable(this.saslAwsSharedConfigFiles);
    }

    /**
     * The AWS session token. Only required if you are using temporary security credentials.
     * 
     */
    @Import(name="saslAwsToken")
    private @Nullable Output<String> saslAwsToken;

    /**
     * @return The AWS session token. Only required if you are using temporary security credentials.
     * 
     */
    public Optional<Output<String>> saslAwsToken() {
        return Optional.ofNullable(this.saslAwsToken);
    }

    /**
     * SASL mechanism, can be plain, scram-sha512, scram-sha256, aws-iam
     * 
     */
    @Import(name="saslMechanism")
    private @Nullable Output<String> saslMechanism;

    /**
     * @return SASL mechanism, can be plain, scram-sha512, scram-sha256, aws-iam
     * 
     */
    public Optional<Output<String>> saslMechanism() {
        return Optional.ofNullable(this.saslMechanism);
    }

    /**
     * OAuth scopes to request when using the oauthbearer mechanism
     * 
     */
    @Import(name="saslOauthScopes", json=true)
    private @Nullable Output<List<String>> saslOauthScopes;

    /**
     * @return OAuth scopes to request when using the oauthbearer mechanism
     * 
     */
    public Optional<Output<List<String>>> saslOauthScopes() {
        return Optional.ofNullable(this.saslOauthScopes);
    }

    /**
     * Password for SASL authentication.
     * 
     */
    @Import(name="saslPassword")
    private @Nullable Output<String> saslPassword;

    /**
     * @return Password for SASL authentication.
     * 
     */
    public Optional<Output<String>> saslPassword() {
        return Optional.ofNullable(this.saslPassword);
    }

    /**
     * The url to retrieve oauth2 tokens from, when using sasl mechanism oauthbearer
     * 
     */
    @Import(name="saslTokenUrl")
    private @Nullable Output<String> saslTokenUrl;

    /**
     * @return The url to retrieve oauth2 tokens from, when using sasl mechanism oauthbearer
     * 
     */
    public Optional<Output<String>> saslTokenUrl() {
        return Optional.ofNullable(this.saslTokenUrl);
    }

    /**
     * Username for SASL authentication.
     * 
     */
    @Import(name="saslUsername")
    private @Nullable Output<String> saslUsername;

    /**
     * @return Username for SASL authentication.
     * 
     */
    public Optional<Output<String>> saslUsername() {
        return Optional.ofNullable(this.saslUsername);
    }

    /**
     * Set this to true only if the target Kafka server is an insecure development instance.
     * 
     */
    @Import(name="skipTlsVerify", json=true)
    private @Nullable Output<Boolean> skipTlsVerify;

    /**
     * @return Set this to true only if the target Kafka server is an insecure development instance.
     * 
     */
    public Optional<Output<Boolean>> skipTlsVerify() {
        return Optional.ofNullable(this.skipTlsVerify);
    }

    /**
     * Timeout in seconds
     * 
     */
    @Import(name="timeout", json=true)
    private @Nullable Output<Integer> timeout;

    /**
     * @return Timeout in seconds
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Enable communication with the Kafka Cluster over TLS.
     * 
     */
    @Import(name="tlsEnabled", json=true)
    private @Nullable Output<Boolean> tlsEnabled;

    /**
     * @return Enable communication with the Kafka Cluster over TLS.
     * 
     */
    public Optional<Output<Boolean>> tlsEnabled() {
        return Optional.ofNullable(this.tlsEnabled);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.bootstrapServers = $.bootstrapServers;
        this.caCert = $.caCert;
        this.caCertFile = $.caCertFile;
        this.clientCert = $.clientCert;
        this.clientCertFile = $.clientCertFile;
        this.clientKey = $.clientKey;
        this.clientKeyFile = $.clientKeyFile;
        this.clientKeyPassphrase = $.clientKeyPassphrase;
        this.kafkaVersion = $.kafkaVersion;
        this.saslAwsAccessKey = $.saslAwsAccessKey;
        this.saslAwsContainerAuthorizationTokenFile = $.saslAwsContainerAuthorizationTokenFile;
        this.saslAwsContainerCredentialsFullUri = $.saslAwsContainerCredentialsFullUri;
        this.saslAwsCredsDebug = $.saslAwsCredsDebug;
        this.saslAwsExternalId = $.saslAwsExternalId;
        this.saslAwsProfile = $.saslAwsProfile;
        this.saslAwsRegion = $.saslAwsRegion;
        this.saslAwsRoleArn = $.saslAwsRoleArn;
        this.saslAwsSecretKey = $.saslAwsSecretKey;
        this.saslAwsSharedConfigFiles = $.saslAwsSharedConfigFiles;
        this.saslAwsToken = $.saslAwsToken;
        this.saslMechanism = $.saslMechanism;
        this.saslOauthScopes = $.saslOauthScopes;
        this.saslPassword = $.saslPassword;
        this.saslTokenUrl = $.saslTokenUrl;
        this.saslUsername = $.saslUsername;
        this.skipTlsVerify = $.skipTlsVerify;
        this.timeout = $.timeout;
        this.tlsEnabled = $.tlsEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param bootstrapServers A list of kafka brokers
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(Output<List<String>> bootstrapServers) {
            $.bootstrapServers = bootstrapServers;
            return this;
        }

        /**
         * @param bootstrapServers A list of kafka brokers
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(List<String> bootstrapServers) {
            return bootstrapServers(Output.of(bootstrapServers));
        }

        /**
         * @param bootstrapServers A list of kafka brokers
         * 
         * @return builder
         * 
         */
        public Builder bootstrapServers(String... bootstrapServers) {
            return bootstrapServers(List.of(bootstrapServers));
        }

        /**
         * @param caCert CA certificate file to validate the server&#39;s certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCert(@Nullable Output<String> caCert) {
            $.caCert = caCert;
            return this;
        }

        /**
         * @param caCert CA certificate file to validate the server&#39;s certificate.
         * 
         * @return builder
         * 
         */
        public Builder caCert(String caCert) {
            return caCert(Output.of(caCert));
        }

        /**
         * @param caCertFile Path to a CA certificate file to validate the server&#39;s certificate.
         * 
         * @return builder
         * 
         * @deprecated
         * This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead.
         * 
         */
        @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead. */
        public Builder caCertFile(@Nullable Output<String> caCertFile) {
            $.caCertFile = caCertFile;
            return this;
        }

        /**
         * @param caCertFile Path to a CA certificate file to validate the server&#39;s certificate.
         * 
         * @return builder
         * 
         * @deprecated
         * This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead.
         * 
         */
        @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `ca_cert` instead. */
        public Builder caCertFile(String caCertFile) {
            return caCertFile(Output.of(caCertFile));
        }

        /**
         * @param clientCert The client certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientCert(@Nullable Output<String> clientCert) {
            $.clientCert = clientCert;
            return this;
        }

        /**
         * @param clientCert The client certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientCert(String clientCert) {
            return clientCert(Output.of(clientCert));
        }

        /**
         * @param clientCertFile Path to a file containing the client certificate.
         * 
         * @return builder
         * 
         * @deprecated
         * This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead.
         * 
         */
        @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead. */
        public Builder clientCertFile(@Nullable Output<String> clientCertFile) {
            $.clientCertFile = clientCertFile;
            return this;
        }

        /**
         * @param clientCertFile Path to a file containing the client certificate.
         * 
         * @return builder
         * 
         * @deprecated
         * This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead.
         * 
         */
        @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `client_cert` instead. */
        public Builder clientCertFile(String clientCertFile) {
            return clientCertFile(Output.of(clientCertFile));
        }

        /**
         * @param clientKey The private key that the certificate was issued for.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(@Nullable Output<String> clientKey) {
            $.clientKey = clientKey;
            return this;
        }

        /**
         * @param clientKey The private key that the certificate was issued for.
         * 
         * @return builder
         * 
         */
        public Builder clientKey(String clientKey) {
            return clientKey(Output.of(clientKey));
        }

        /**
         * @param clientKeyFile Path to a file containing the private key that the certificate was issued for.
         * 
         * @return builder
         * 
         * @deprecated
         * This parameter is now deprecated and will be removed in a later release, please use `client_key` instead.
         * 
         */
        @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `client_key` instead. */
        public Builder clientKeyFile(@Nullable Output<String> clientKeyFile) {
            $.clientKeyFile = clientKeyFile;
            return this;
        }

        /**
         * @param clientKeyFile Path to a file containing the private key that the certificate was issued for.
         * 
         * @return builder
         * 
         * @deprecated
         * This parameter is now deprecated and will be removed in a later release, please use `client_key` instead.
         * 
         */
        @Deprecated /* This parameter is now deprecated and will be removed in a later release, please use `client_key` instead. */
        public Builder clientKeyFile(String clientKeyFile) {
            return clientKeyFile(Output.of(clientKeyFile));
        }

        /**
         * @param clientKeyPassphrase The passphrase for the private key that the certificate was issued for.
         * 
         * @return builder
         * 
         */
        public Builder clientKeyPassphrase(@Nullable Output<String> clientKeyPassphrase) {
            $.clientKeyPassphrase = clientKeyPassphrase;
            return this;
        }

        /**
         * @param clientKeyPassphrase The passphrase for the private key that the certificate was issued for.
         * 
         * @return builder
         * 
         */
        public Builder clientKeyPassphrase(String clientKeyPassphrase) {
            return clientKeyPassphrase(Output.of(clientKeyPassphrase));
        }

        /**
         * @param kafkaVersion The version of Kafka protocol to use in `$MAJOR.$MINOR.$PATCH` format. Some features may not be available on older
         * versions. Default is 2.7.0.
         * 
         * @return builder
         * 
         */
        public Builder kafkaVersion(@Nullable Output<String> kafkaVersion) {
            $.kafkaVersion = kafkaVersion;
            return this;
        }

        /**
         * @param kafkaVersion The version of Kafka protocol to use in `$MAJOR.$MINOR.$PATCH` format. Some features may not be available on older
         * versions. Default is 2.7.0.
         * 
         * @return builder
         * 
         */
        public Builder kafkaVersion(String kafkaVersion) {
            return kafkaVersion(Output.of(kafkaVersion));
        }

        /**
         * @param saslAwsAccessKey The AWS access key.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsAccessKey(@Nullable Output<String> saslAwsAccessKey) {
            $.saslAwsAccessKey = saslAwsAccessKey;
            return this;
        }

        /**
         * @param saslAwsAccessKey The AWS access key.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsAccessKey(String saslAwsAccessKey) {
            return saslAwsAccessKey(Output.of(saslAwsAccessKey));
        }

        /**
         * @param saslAwsContainerAuthorizationTokenFile Path to a file containing the AWS pod identity authorization token
         * 
         * @return builder
         * 
         */
        public Builder saslAwsContainerAuthorizationTokenFile(@Nullable Output<String> saslAwsContainerAuthorizationTokenFile) {
            $.saslAwsContainerAuthorizationTokenFile = saslAwsContainerAuthorizationTokenFile;
            return this;
        }

        /**
         * @param saslAwsContainerAuthorizationTokenFile Path to a file containing the AWS pod identity authorization token
         * 
         * @return builder
         * 
         */
        public Builder saslAwsContainerAuthorizationTokenFile(String saslAwsContainerAuthorizationTokenFile) {
            return saslAwsContainerAuthorizationTokenFile(Output.of(saslAwsContainerAuthorizationTokenFile));
        }

        /**
         * @param saslAwsContainerCredentialsFullUri URI to retrieve AWS credentials from
         * 
         * @return builder
         * 
         */
        public Builder saslAwsContainerCredentialsFullUri(@Nullable Output<String> saslAwsContainerCredentialsFullUri) {
            $.saslAwsContainerCredentialsFullUri = saslAwsContainerCredentialsFullUri;
            return this;
        }

        /**
         * @param saslAwsContainerCredentialsFullUri URI to retrieve AWS credentials from
         * 
         * @return builder
         * 
         */
        public Builder saslAwsContainerCredentialsFullUri(String saslAwsContainerCredentialsFullUri) {
            return saslAwsContainerCredentialsFullUri(Output.of(saslAwsContainerCredentialsFullUri));
        }

        /**
         * @param saslAwsCredsDebug Set this to true to turn AWS credentials debug.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsCredsDebug(@Nullable Output<Boolean> saslAwsCredsDebug) {
            $.saslAwsCredsDebug = saslAwsCredsDebug;
            return this;
        }

        /**
         * @param saslAwsCredsDebug Set this to true to turn AWS credentials debug.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsCredsDebug(Boolean saslAwsCredsDebug) {
            return saslAwsCredsDebug(Output.of(saslAwsCredsDebug));
        }

        /**
         * @param saslAwsExternalId External ID of the AWS IAM role to assume
         * 
         * @return builder
         * 
         */
        public Builder saslAwsExternalId(@Nullable Output<String> saslAwsExternalId) {
            $.saslAwsExternalId = saslAwsExternalId;
            return this;
        }

        /**
         * @param saslAwsExternalId External ID of the AWS IAM role to assume
         * 
         * @return builder
         * 
         */
        public Builder saslAwsExternalId(String saslAwsExternalId) {
            return saslAwsExternalId(Output.of(saslAwsExternalId));
        }

        /**
         * @param saslAwsProfile AWS profile name to use
         * 
         * @return builder
         * 
         */
        public Builder saslAwsProfile(@Nullable Output<String> saslAwsProfile) {
            $.saslAwsProfile = saslAwsProfile;
            return this;
        }

        /**
         * @param saslAwsProfile AWS profile name to use
         * 
         * @return builder
         * 
         */
        public Builder saslAwsProfile(String saslAwsProfile) {
            return saslAwsProfile(Output.of(saslAwsProfile));
        }

        /**
         * @param saslAwsRegion AWS region where MSK is deployed.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsRegion(@Nullable Output<String> saslAwsRegion) {
            $.saslAwsRegion = saslAwsRegion;
            return this;
        }

        /**
         * @param saslAwsRegion AWS region where MSK is deployed.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsRegion(String saslAwsRegion) {
            return saslAwsRegion(Output.of(saslAwsRegion));
        }

        /**
         * @param saslAwsRoleArn Arn of an AWS IAM role to assume
         * 
         * @return builder
         * 
         */
        public Builder saslAwsRoleArn(@Nullable Output<String> saslAwsRoleArn) {
            $.saslAwsRoleArn = saslAwsRoleArn;
            return this;
        }

        /**
         * @param saslAwsRoleArn Arn of an AWS IAM role to assume
         * 
         * @return builder
         * 
         */
        public Builder saslAwsRoleArn(String saslAwsRoleArn) {
            return saslAwsRoleArn(Output.of(saslAwsRoleArn));
        }

        /**
         * @param saslAwsSecretKey The AWS secret key.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsSecretKey(@Nullable Output<String> saslAwsSecretKey) {
            $.saslAwsSecretKey = saslAwsSecretKey;
            return this;
        }

        /**
         * @param saslAwsSecretKey The AWS secret key.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsSecretKey(String saslAwsSecretKey) {
            return saslAwsSecretKey(Output.of(saslAwsSecretKey));
        }

        /**
         * @param saslAwsSharedConfigFiles List of paths to AWS shared config files.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsSharedConfigFiles(@Nullable Output<List<String>> saslAwsSharedConfigFiles) {
            $.saslAwsSharedConfigFiles = saslAwsSharedConfigFiles;
            return this;
        }

        /**
         * @param saslAwsSharedConfigFiles List of paths to AWS shared config files.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsSharedConfigFiles(List<String> saslAwsSharedConfigFiles) {
            return saslAwsSharedConfigFiles(Output.of(saslAwsSharedConfigFiles));
        }

        /**
         * @param saslAwsSharedConfigFiles List of paths to AWS shared config files.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsSharedConfigFiles(String... saslAwsSharedConfigFiles) {
            return saslAwsSharedConfigFiles(List.of(saslAwsSharedConfigFiles));
        }

        /**
         * @param saslAwsToken The AWS session token. Only required if you are using temporary security credentials.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsToken(@Nullable Output<String> saslAwsToken) {
            $.saslAwsToken = saslAwsToken;
            return this;
        }

        /**
         * @param saslAwsToken The AWS session token. Only required if you are using temporary security credentials.
         * 
         * @return builder
         * 
         */
        public Builder saslAwsToken(String saslAwsToken) {
            return saslAwsToken(Output.of(saslAwsToken));
        }

        /**
         * @param saslMechanism SASL mechanism, can be plain, scram-sha512, scram-sha256, aws-iam
         * 
         * @return builder
         * 
         */
        public Builder saslMechanism(@Nullable Output<String> saslMechanism) {
            $.saslMechanism = saslMechanism;
            return this;
        }

        /**
         * @param saslMechanism SASL mechanism, can be plain, scram-sha512, scram-sha256, aws-iam
         * 
         * @return builder
         * 
         */
        public Builder saslMechanism(String saslMechanism) {
            return saslMechanism(Output.of(saslMechanism));
        }

        /**
         * @param saslOauthScopes OAuth scopes to request when using the oauthbearer mechanism
         * 
         * @return builder
         * 
         */
        public Builder saslOauthScopes(@Nullable Output<List<String>> saslOauthScopes) {
            $.saslOauthScopes = saslOauthScopes;
            return this;
        }

        /**
         * @param saslOauthScopes OAuth scopes to request when using the oauthbearer mechanism
         * 
         * @return builder
         * 
         */
        public Builder saslOauthScopes(List<String> saslOauthScopes) {
            return saslOauthScopes(Output.of(saslOauthScopes));
        }

        /**
         * @param saslOauthScopes OAuth scopes to request when using the oauthbearer mechanism
         * 
         * @return builder
         * 
         */
        public Builder saslOauthScopes(String... saslOauthScopes) {
            return saslOauthScopes(List.of(saslOauthScopes));
        }

        /**
         * @param saslPassword Password for SASL authentication.
         * 
         * @return builder
         * 
         */
        public Builder saslPassword(@Nullable Output<String> saslPassword) {
            $.saslPassword = saslPassword;
            return this;
        }

        /**
         * @param saslPassword Password for SASL authentication.
         * 
         * @return builder
         * 
         */
        public Builder saslPassword(String saslPassword) {
            return saslPassword(Output.of(saslPassword));
        }

        /**
         * @param saslTokenUrl The url to retrieve oauth2 tokens from, when using sasl mechanism oauthbearer
         * 
         * @return builder
         * 
         */
        public Builder saslTokenUrl(@Nullable Output<String> saslTokenUrl) {
            $.saslTokenUrl = saslTokenUrl;
            return this;
        }

        /**
         * @param saslTokenUrl The url to retrieve oauth2 tokens from, when using sasl mechanism oauthbearer
         * 
         * @return builder
         * 
         */
        public Builder saslTokenUrl(String saslTokenUrl) {
            return saslTokenUrl(Output.of(saslTokenUrl));
        }

        /**
         * @param saslUsername Username for SASL authentication.
         * 
         * @return builder
         * 
         */
        public Builder saslUsername(@Nullable Output<String> saslUsername) {
            $.saslUsername = saslUsername;
            return this;
        }

        /**
         * @param saslUsername Username for SASL authentication.
         * 
         * @return builder
         * 
         */
        public Builder saslUsername(String saslUsername) {
            return saslUsername(Output.of(saslUsername));
        }

        /**
         * @param skipTlsVerify Set this to true only if the target Kafka server is an insecure development instance.
         * 
         * @return builder
         * 
         */
        public Builder skipTlsVerify(@Nullable Output<Boolean> skipTlsVerify) {
            $.skipTlsVerify = skipTlsVerify;
            return this;
        }

        /**
         * @param skipTlsVerify Set this to true only if the target Kafka server is an insecure development instance.
         * 
         * @return builder
         * 
         */
        public Builder skipTlsVerify(Boolean skipTlsVerify) {
            return skipTlsVerify(Output.of(skipTlsVerify));
        }

        /**
         * @param timeout Timeout in seconds
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Timeout in seconds
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param tlsEnabled Enable communication with the Kafka Cluster over TLS.
         * 
         * @return builder
         * 
         */
        public Builder tlsEnabled(@Nullable Output<Boolean> tlsEnabled) {
            $.tlsEnabled = tlsEnabled;
            return this;
        }

        /**
         * @param tlsEnabled Enable communication with the Kafka Cluster over TLS.
         * 
         * @return builder
         * 
         */
        public Builder tlsEnabled(Boolean tlsEnabled) {
            return tlsEnabled(Output.of(tlsEnabled));
        }

        public ProviderArgs build() {
            if ($.bootstrapServers == null) {
                throw new MissingRequiredPropertyException("ProviderArgs", "bootstrapServers");
            }
            $.saslMechanism = Codegen.stringProp("saslMechanism").output().arg($.saslMechanism).env("KAFKA_SASL_MECHANISM").def("plain").getNullable();
            $.skipTlsVerify = Codegen.booleanProp("skipTlsVerify").output().arg($.skipTlsVerify).env("KAFKA_SKIP_VERIFY").def(false).getNullable();
            $.tlsEnabled = Codegen.booleanProp("tlsEnabled").output().arg($.tlsEnabled).env("KAFKA_ENABLE_TLS").def(true).getNullable();
            return $;
        }
    }

}
