// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The `kafka.Acl` resource manages Apache Kafka Access Control Lists (ACLs). ACLs control access to Kafka resources like topics, consumer groups, and clusters by defining which principals (users or services) can perform specific operations on these resources.
 *
 * ## Example Usage
 *
 * ### Allow Producer Access to Topic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kafka from "@pulumi/kafka";
 *
 * const producer = new kafka.Acl("producer", {
 *     aclResourceName: "orders",
 *     aclResourceType: "Topic",
 *     aclPrincipal: "User:producer-service",
 *     aclHost: "*",
 *     aclOperation: "Write",
 *     aclPermissionType: "Allow",
 * });
 * // Also grant describe permission for producers
 * const producerDescribe = new kafka.Acl("producer_describe", {
 *     aclResourceName: "orders",
 *     aclResourceType: "Topic",
 *     aclPrincipal: "User:producer-service",
 *     aclHost: "*",
 *     aclOperation: "Describe",
 *     aclPermissionType: "Allow",
 * });
 * ```
 *
 * ### Allow Consumer Group Access
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kafka from "@pulumi/kafka";
 *
 * // Allow read access to topic
 * const consumerRead = new kafka.Acl("consumer_read", {
 *     aclResourceName: "orders",
 *     aclResourceType: "Topic",
 *     aclPrincipal: "User:consumer-service",
 *     aclHost: "*",
 *     aclOperation: "Read",
 *     aclPermissionType: "Allow",
 * });
 * // Allow access to consumer group
 * const consumerGroup = new kafka.Acl("consumer_group", {
 *     aclResourceName: "order-processors",
 *     aclResourceType: "Group",
 *     aclPrincipal: "User:consumer-service",
 *     aclHost: "*",
 *     aclOperation: "Read",
 *     aclPermissionType: "Allow",
 * });
 * ```
 *
 * ### Prefix-Based Access Control
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kafka from "@pulumi/kafka";
 *
 * // Grant access to all topics with prefix "logs-"
 * const logsAccess = new kafka.Acl("logs_access", {
 *     aclResourceName: "logs-",
 *     aclResourceType: "Topic",
 *     resourcePatternTypeFilter: "Prefixed",
 *     aclPrincipal: "User:log-aggregator",
 *     aclHost: "*",
 *     aclOperation: "Read",
 *     aclPermissionType: "Allow",
 * });
 * ```
 *
 * ### Admin User with Full Access
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kafka from "@pulumi/kafka";
 *
 * // Grant cluster-level admin access
 * const adminCluster = new kafka.Acl("admin_cluster", {
 *     aclResourceName: "kafka-cluster",
 *     aclResourceType: "Cluster",
 *     aclPrincipal: "User:admin",
 *     aclHost: "*",
 *     aclOperation: "All",
 *     aclPermissionType: "Allow",
 * });
 * ```
 *
 * ## Common ACL Patterns
 *
 * ### Producer ACLs
 * Producers typically need:
 * - `Write` and `Describe` on topics
 * - `Write` on `TransactionalID` (for transactional producers)
 * - `IdempotentWrite` on `Cluster` (for idempotent producers)
 *
 * ### Consumer ACLs
 * Consumers typically need:
 * - `Read` on topics
 * - `Read` on consumer groups
 * - `Describe` on topics (optional, for metadata)
 *
 * ### Admin ACLs
 * Administrators typically need:
 * - `All` on `Cluster`
 * - Or specific operations like `Alter`, `AlterConfigs`, `Create`, `Delete`
 *
 * > **Warning:** Be cautious with `Deny` ACLs as they take precedence over `Allow` ACLs. A deny rule will block access even if an allow rule exists.
 *
 * ## Import
 *
 * Kafka ACLs can be imported using a pipe-delimited string containing all ACL properties:
 *
 * Format: ${acl_principal}|${acl_host}|${acl_operation}|${acl_permission_type}|${resource_type}|${resource_name}|${resource_pattern_type_filter}
 *
 * ```sh
 * $ pulumi import kafka:index/acl:Acl example 'User:producer|*|Write|Allow|Topic|orders|Literal'
 * ```
 */
export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kafka:index/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    declare public readonly aclHost: pulumi.Output<string>;
    declare public readonly aclOperation: pulumi.Output<string>;
    declare public readonly aclPermissionType: pulumi.Output<string>;
    declare public readonly aclPrincipal: pulumi.Output<string>;
    /**
     * The name of the resource
     */
    declare public readonly aclResourceName: pulumi.Output<string>;
    declare public readonly aclResourceType: pulumi.Output<string>;
    declare public readonly resourcePatternTypeFilter: pulumi.Output<string | undefined>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["aclHost"] = state?.aclHost;
            resourceInputs["aclOperation"] = state?.aclOperation;
            resourceInputs["aclPermissionType"] = state?.aclPermissionType;
            resourceInputs["aclPrincipal"] = state?.aclPrincipal;
            resourceInputs["aclResourceName"] = state?.aclResourceName;
            resourceInputs["aclResourceType"] = state?.aclResourceType;
            resourceInputs["resourcePatternTypeFilter"] = state?.resourcePatternTypeFilter;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if (args?.aclHost === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclHost'");
            }
            if (args?.aclOperation === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclOperation'");
            }
            if (args?.aclPermissionType === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclPermissionType'");
            }
            if (args?.aclPrincipal === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclPrincipal'");
            }
            if (args?.aclResourceName === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclResourceName'");
            }
            if (args?.aclResourceType === undefined && !opts.urn) {
                throw new Error("Missing required property 'aclResourceType'");
            }
            resourceInputs["aclHost"] = args?.aclHost;
            resourceInputs["aclOperation"] = args?.aclOperation;
            resourceInputs["aclPermissionType"] = args?.aclPermissionType;
            resourceInputs["aclPrincipal"] = args?.aclPrincipal;
            resourceInputs["aclResourceName"] = args?.aclResourceName;
            resourceInputs["aclResourceType"] = args?.aclResourceType;
            resourceInputs["resourcePatternTypeFilter"] = args?.resourcePatternTypeFilter;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    aclHost?: pulumi.Input<string>;
    aclOperation?: pulumi.Input<string>;
    aclPermissionType?: pulumi.Input<string>;
    aclPrincipal?: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    aclResourceName?: pulumi.Input<string>;
    aclResourceType?: pulumi.Input<string>;
    resourcePatternTypeFilter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    aclHost: pulumi.Input<string>;
    aclOperation: pulumi.Input<string>;
    aclPermissionType: pulumi.Input<string>;
    aclPrincipal: pulumi.Input<string>;
    /**
     * The name of the resource
     */
    aclResourceName: pulumi.Input<string>;
    aclResourceType: pulumi.Input<string>;
    resourcePatternTypeFilter?: pulumi.Input<string>;
}
