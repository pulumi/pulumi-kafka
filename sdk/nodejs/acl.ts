// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A resource for managing Kafka ACLs.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as kafka from "@pulumi/kafka";
 *
 * const test = new kafka.Acl("test", {
 *     aclResourceName: "syslog",
 *     aclResourceType: "Topic",
 *     aclPrincipal: "User:Alice",
 *     aclHost: "*",
 *     aclOperation: "Write",
 *     aclPermissionType: "Deny",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * ACLs can be imported using the following pattern
 *
 * ```sh
 * $ pulumi import kafka:index/acl:Acl test "acl_principal|acl_host|acl_operation|acl_permission_type|resource_type|resource_name|resource_pattern_type_filter"
 * ```
 * e.g.
 *
 * ```sh
 * $ pulumi import kafka:index/acl:Acl test "User:Alice|*|Write|Deny|Topic|syslog|Prefixed"
 * ```
 */
export class Acl extends pulumi.CustomResource {
    /**
     * Get an existing Acl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclState, opts?: pulumi.CustomResourceOptions): Acl {
        return new Acl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'kafka:index/acl:Acl';

    /**
     * Returns true if the given object is an instance of Acl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Acl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Acl.__pulumiType;
    }

    /**
     * Host from which principal listed in `aclPrincipal`
     * will have access.
     */
    public readonly aclHost!: pulumi.Output<string>;
    /**
     * Operation that is being allowed or denied. Valid
     * values are `Unknown`, `Any`, `All`, `Read`, `Write`, `Create`, `Delete`, `Alter`,
     * `Describe`, `ClusterAction`, `DescribeConfigs`, `AlterConfigs`, `IdempotentWrite`.
     */
    public readonly aclOperation!: pulumi.Output<string>;
    /**
     * Type of permission. Valid values are `Unknown`,
     * `Any`, `Allow`, `Deny`.
     */
    public readonly aclPermissionType!: pulumi.Output<string>;
    /**
     * Principal that is being allowed or denied.
     */
    public readonly aclPrincipal!: pulumi.Output<string>;
    /**
     * The name of the resource.
     */
    public readonly aclResourceName!: pulumi.Output<string>;
    /**
     * The type of resource. Valid values are `Unknown`,
     * `Any`, `Topic`, `Group`, `Cluster`, `TransactionalID`.
     */
    public readonly aclResourceType!: pulumi.Output<string>;
    /**
     * The pattern filter. Valid values
     * are `Prefixed`, `Any`, `Match`, `Literal`. Default `Literal`.
     */
    public readonly resourcePatternTypeFilter!: pulumi.Output<string | undefined>;

    /**
     * Create a Acl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclArgs | AclState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclState | undefined;
            resourceInputs["aclHost"] = state ? state.aclHost : undefined;
            resourceInputs["aclOperation"] = state ? state.aclOperation : undefined;
            resourceInputs["aclPermissionType"] = state ? state.aclPermissionType : undefined;
            resourceInputs["aclPrincipal"] = state ? state.aclPrincipal : undefined;
            resourceInputs["aclResourceName"] = state ? state.aclResourceName : undefined;
            resourceInputs["aclResourceType"] = state ? state.aclResourceType : undefined;
            resourceInputs["resourcePatternTypeFilter"] = state ? state.resourcePatternTypeFilter : undefined;
        } else {
            const args = argsOrState as AclArgs | undefined;
            if ((!args || args.aclHost === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclHost'");
            }
            if ((!args || args.aclOperation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclOperation'");
            }
            if ((!args || args.aclPermissionType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclPermissionType'");
            }
            if ((!args || args.aclPrincipal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclPrincipal'");
            }
            if ((!args || args.aclResourceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclResourceName'");
            }
            if ((!args || args.aclResourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclResourceType'");
            }
            resourceInputs["aclHost"] = args ? args.aclHost : undefined;
            resourceInputs["aclOperation"] = args ? args.aclOperation : undefined;
            resourceInputs["aclPermissionType"] = args ? args.aclPermissionType : undefined;
            resourceInputs["aclPrincipal"] = args ? args.aclPrincipal : undefined;
            resourceInputs["aclResourceName"] = args ? args.aclResourceName : undefined;
            resourceInputs["aclResourceType"] = args ? args.aclResourceType : undefined;
            resourceInputs["resourcePatternTypeFilter"] = args ? args.resourcePatternTypeFilter : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Acl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Acl resources.
 */
export interface AclState {
    /**
     * Host from which principal listed in `aclPrincipal`
     * will have access.
     */
    aclHost?: pulumi.Input<string>;
    /**
     * Operation that is being allowed or denied. Valid
     * values are `Unknown`, `Any`, `All`, `Read`, `Write`, `Create`, `Delete`, `Alter`,
     * `Describe`, `ClusterAction`, `DescribeConfigs`, `AlterConfigs`, `IdempotentWrite`.
     */
    aclOperation?: pulumi.Input<string>;
    /**
     * Type of permission. Valid values are `Unknown`,
     * `Any`, `Allow`, `Deny`.
     */
    aclPermissionType?: pulumi.Input<string>;
    /**
     * Principal that is being allowed or denied.
     */
    aclPrincipal?: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    aclResourceName?: pulumi.Input<string>;
    /**
     * The type of resource. Valid values are `Unknown`,
     * `Any`, `Topic`, `Group`, `Cluster`, `TransactionalID`.
     */
    aclResourceType?: pulumi.Input<string>;
    /**
     * The pattern filter. Valid values
     * are `Prefixed`, `Any`, `Match`, `Literal`. Default `Literal`.
     */
    resourcePatternTypeFilter?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Acl resource.
 */
export interface AclArgs {
    /**
     * Host from which principal listed in `aclPrincipal`
     * will have access.
     */
    aclHost: pulumi.Input<string>;
    /**
     * Operation that is being allowed or denied. Valid
     * values are `Unknown`, `Any`, `All`, `Read`, `Write`, `Create`, `Delete`, `Alter`,
     * `Describe`, `ClusterAction`, `DescribeConfigs`, `AlterConfigs`, `IdempotentWrite`.
     */
    aclOperation: pulumi.Input<string>;
    /**
     * Type of permission. Valid values are `Unknown`,
     * `Any`, `Allow`, `Deny`.
     */
    aclPermissionType: pulumi.Input<string>;
    /**
     * Principal that is being allowed or denied.
     */
    aclPrincipal: pulumi.Input<string>;
    /**
     * The name of the resource.
     */
    aclResourceName: pulumi.Input<string>;
    /**
     * The type of resource. Valid values are `Unknown`,
     * `Any`, `Topic`, `Group`, `Cluster`, `TransactionalID`.
     */
    aclResourceType: pulumi.Input<string>;
    /**
     * The pattern filter. Valid values
     * are `Prefixed`, `Any`, `Match`, `Literal`. Default `Literal`.
     */
    resourcePatternTypeFilter?: pulumi.Input<string>;
}
